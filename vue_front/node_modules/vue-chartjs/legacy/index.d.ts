export namespace Bar {
    namespace props {
        namespace chartData {
            const type: ObjectConstructor;
            const required: boolean;
        }
        namespace chartOptions {
            const type_1: ObjectConstructor;
            export { type_1 as type };
            function _default(): void;
            export { _default as default };
        }
        namespace datasetIdKey {
            const type_2: StringConstructor;
            export { type_2 as type };
            const _default_1: string;
            export { _default_1 as default };
        }
        namespace chartId {
            const type_3: StringConstructor;
            export { type_3 as type };
            export { chartId as default };
        }
        namespace width {
            const type_4: NumberConstructor;
            export { type_4 as type };
            const _default_2: number;
            export { _default_2 as default };
        }
        namespace height {
            const type_5: NumberConstructor;
            export { type_5 as type };
            const _default_3: number;
            export { _default_3 as default };
        }
        namespace cssClasses {
            const type_6: StringConstructor;
            export { type_6 as type };
            const _default_4: string;
            export { _default_4 as default };
        }
        namespace styles {
            const type_7: ObjectConstructor;
            export { type_7 as type };
            function _default_5(): void;
            export { _default_5 as default };
        }
        namespace plugins {
            const type_8: ArrayConstructor;
            export { type_8 as type };
            function _default_6(): any[];
            export { _default_6 as default };
        }
    }
    function data(): {
        _chart: any;
    };
    function data(): {
        _chart: any;
    };
    namespace computed {
        function hasAnnotationPlugin(): boolean;
        function hasAnnotationPlugin(): boolean;
    }
    function created(): void;
    function created(): void;
    function mounted(): void;
    function mounted(): void;
    namespace watch {
        export namespace chartData_1 {
            function handler(newValue: any, oldValue: any): void;
            const deep: boolean;
        }
        export { chartData_1 as chartData };
        export namespace chartOptions_1 {
            export function handler_1(newValue: any): void;
            export { handler_1 as handler };
            const deep_1: boolean;
            export { deep_1 as deep };
        }
        export { chartOptions_1 as chartOptions };
    }
    namespace methods {
        function renderChart(data: any, options: any): void;
        function renderChart(data: any, options: any): void;
        function chartDataHandler(newValue: any, oldValue: any): void;
        function chartDataHandler(newValue: any, oldValue: any): void;
        function chartOptionsHandler(options: any): void;
        function chartOptionsHandler(options: any): void;
        function updateChart(): void;
        function updateChart(): void;
        function getCurrentChart(): any;
        function getCurrentChart(): any;
        function setCurrentChart(chart: any): void;
        function setCurrentChart(chart: any): void;
    }
    function beforeDestroy(): void;
    function beforeDestroy(): void;
    function render(createElement: any): any;
}
export namespace Bubble { }
export namespace Doughnut { }
export namespace Line { }
export namespace Pie { }
export namespace PolarArea { }
export namespace Radar { }
export namespace Scatter { }
export function generateChart(chartId: any, chartType: any, chartController: any): {
    props: {
        chartData: {
            type: ObjectConstructor;
            required: boolean;
        };
        chartOptions: {
            type: ObjectConstructor;
            default: () => void;
        };
        datasetIdKey: {
            type: StringConstructor;
            default: string;
        };
        chartId: {
            type: StringConstructor;
            default: any;
        };
        width: {
            type: NumberConstructor;
            default: number;
        };
        height: {
            type: NumberConstructor;
            default: number;
        };
        cssClasses: {
            type: StringConstructor;
            default: string;
        };
        styles: {
            type: ObjectConstructor;
            default: () => void;
        };
        plugins: {
            type: ArrayConstructor;
            default: () => any[];
        };
    };
    data(): {
        _chart: any;
    };
    computed: {
        hasAnnotationPlugin(): boolean;
    };
    created(): void;
    mounted(): void;
    watch: {
        chartData: {
            handler: (newValue: any, oldValue: any) => void;
            deep: boolean;
        };
        chartOptions: {
            handler: (newValue: any) => void;
            deep: boolean;
        };
    };
    methods: {
        renderChart(data: any, options: any): void;
        chartDataHandler(newValue: any, oldValue: any): void;
        chartOptionsHandler(options: any): void;
        updateChart(): void;
        getCurrentChart(): any;
        setCurrentChart(chart: any): void;
    };
    beforeDestroy(): void;
    render: (createElement: any) => any;
};
//# sourceMappingURL=index.d.ts.map