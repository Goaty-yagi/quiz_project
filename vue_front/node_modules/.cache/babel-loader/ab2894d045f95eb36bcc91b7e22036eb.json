{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      description: '',\n      alert: false\n    };\n  },\n\n  props: ['questionDescription', 'questionTitle', 'questionId', 'handleNotifications'],\n\n  mounted() {\n    console.log('answerMounted', this.questionId);\n    this.$store.commit('showModalTrue');\n  },\n\n  beforeUnmount() {\n    this.$store.commit('showModalFalse');\n  },\n\n  methods: {\n    resetNotifications() {\n      this.alert = false;\n    },\n\n    descriptionCheck() {\n      if (this.description == '') {\n        this.alert = true;\n        setTimeout(this.resetNotifications, 3000);\n      }\n    },\n\n    async answerPost() {\n      console.log(\"this.questionId\", this.questionId);\n      await axios({\n        method: 'post',\n        url: '/api/board/answer/create',\n        data: {\n          description: this.description,\n          user: this.$store.state.signup.user.uid,\n          question: this.questionId,\n          liked_answer: []\n        }\n      });\n    },\n\n    async addAnswer() {\n      this.descriptionCheck();\n      console.log('start add');\n\n      if (this.alert == false) {\n        await this.answerPost();\n        this.$emit('getDetail');\n        this.$store.dispatch(\"handleNotifications\", 'answer');\n        this.$emit('handleShowAnswerPage');\n        console.log(\"end_answer\", this.$store.state.board.notifications);\n      } //   this.$router.go({path: this.$router.currentRoute.path, force: true})\n\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAyCA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe;EACXC,IAAI,GAAE;IACF,OAAM;MACFC,WAAW,EAAC,EADV;MAEFC,KAAK,EAAE;IAFL,CAAN;EAIH,CANU;;EAOXC,KAAK,EAAC,CACF,qBADE,EAEF,eAFE,EAGF,YAHE,EAIF,qBAJE,CAPK;;EAaXC,OAAO,GAAE;IACLC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4B,KAAKC,UAAjC;IACA,KAAKC,MAAL,CAAYC,MAAZ,CAAmB,eAAnB;EACH,CAhBU;;EAiBXC,aAAa,GAAE;IACX,KAAKF,MAAL,CAAYC,MAAZ,CAAmB,gBAAnB;EACH,CAnBU;;EAoBXE,OAAO,EAAC;IACJC,kBAAkB,GAAE;MAChB,KAAKV,KAAL,GAAa,KAAb;IACH,CAHG;;IAIJW,gBAAgB,GAAE;MACb,IAAG,KAAKZ,WAAL,IAAkB,EAArB,EAAwB;QACpB,KAAKC,KAAL,GAAa,IAAb;QACAY,UAAU,CAAC,KAAKF,kBAAN,EAA0B,IAA1B,CAAV;MACJ;IACH,CATE;;IAUJ,MAAMG,UAAN,GAAkB;MACdV,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8B,KAAKC,UAAnC;MACA,MAAMR,KAAK,CAAC;QACRiB,MAAM,EAAE,MADA;QAERC,GAAG,EAAE,0BAFG;QAGRjB,IAAI,EAAE;UACFC,WAAW,EAAE,KAAKA,WADhB;UAEFiB,IAAI,EAAE,KAAKV,MAAL,CAAYW,KAAZ,CAAkBC,MAAlB,CAAyBF,IAAzB,CAA8BG,GAFlC;UAGFC,QAAQ,EAAE,KAAKf,UAHb;UAIFgB,YAAY,EAAC;QAJX;MAHE,CAAD,CAAX;IAUH,CAtBG;;IAuBJ,MAAMC,SAAN,GAAiB;MACb,KAAKX,gBAAL;MACAR,OAAO,CAACC,GAAR,CAAY,WAAZ;;MACA,IAAG,KAAKJ,KAAL,IAAY,KAAf,EAAqB;QAClB,MAAM,KAAKa,UAAL,EAAN;QACC,KAAKU,KAAL,CAAW,WAAX;QACA,KAAKjB,MAAL,CAAYkB,QAAZ,CAAqB,qBAArB,EAA4C,QAA5C;QACA,KAAKD,KAAL,CAAW,sBAAX;QACApB,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyB,KAAKE,MAAL,CAAYW,KAAZ,CAAkBQ,KAAlB,CAAwBC,aAAjD;MACJ,CATa,CAUb;;IACF;;EAlCE;AApBG,CAAf","names":["axios","data","description","alert","props","mounted","console","log","questionId","$store","commit","beforeUnmount","methods","resetNotifications","descriptionCheck","setTimeout","answerPost","method","url","user","state","signup","uid","question","liked_answer","addAnswer","$emit","dispatch","board","notifications"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/board/Answer.vue"],"sourcesContent":["<template>\n     <div class=\"l-wrapper\">\n        <div class='l-container'>\n            <div class=\"title-blue\">\n                 <p>質問文</p>\n            </div>\n            \n            <form class=\"form\" @submit.prevent='addAnswer'>\n                <div class=\"question-title\">\n                    <p>{{ questionTitle }}</p>\n                </div>\n                <div class=\"question-discription\">\n                    <p>{{ questionDescription }}</p>\n                </div>\n\n                <div class=\"line\"></div>\n\n                <div class=\"answer-wraper\">\n                    <p class=\"title-blue\">回答文</p>\n                    <textarea class='form-text' type=\"text\" v-model='description' placeholder=\"回答\"></textarea>\n                </div>\n                <!-- <div class=\"image\">\n                    <i class=\"fas fa-camera\"></i>\n                    <p>写真を添付</p>\n                </div> -->\n                <div class=\"button-group\">\n                    <p class=\"cancel\" @click=\"$emit('handleShowAnswerPage')\">キャンセル</p>\n                    <button class=\"btn-tr-black-base-sq\" \n                    :disabled=\"alert\">回答する</button>\n                </div>\n            </form>\n            <div v-if=\"alert\" :class=\"{'notification-red':alert}\">\n                <div class=\"notification-text\">\n                    文章を入力してください。\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nexport default {\n    data(){\n        return{\n            description:'',\n            alert: false\n        }\n    },\n    props:[\n        'questionDescription',\n        'questionTitle',\n        'questionId',\n        'handleNotifications'\n    ],\n    mounted(){\n        console.log('answerMounted',this.questionId)\n        this.$store.commit('showModalTrue')\n    },\n    beforeUnmount(){\n        this.$store.commit('showModalFalse')\n    },\n    methods:{\n        resetNotifications(){\n            this.alert = false\n        },\n        descriptionCheck(){\n             if(this.description==''){\n                 this.alert = true\n                 setTimeout(this.resetNotifications, 3000)\n             }\n         },\n        async answerPost(){\n            console.log(\"this.questionId\",this.questionId)\n            await axios({\n                method: 'post',\n                url: '/api/board/answer/create',\n                data: {\n                    description: this.description,\n                    user: this.$store.state.signup.user.uid,\n                    question: this.questionId,\n                    liked_answer:[]\n                }\n            })\n        },\n        async addAnswer(){\n            this.descriptionCheck()\n            console.log('start add')\n            if(this.alert==false){\n               await this.answerPost()\n                this.$emit('getDetail')\n                this.$store.dispatch(\"handleNotifications\", 'answer')\n                this.$emit('handleShowAnswerPage')\n                console.log(\"end_answer\",this.$store.state.board.notifications)\n            }\n            //   this.$router.go({path: this.$router.currentRoute.path, force: true})\n         },\n    }\n}\n</script>\n\n<style scoped lang='scss'>\n@import \"style/_variables.scss\";\n.l-container{\n    animation: l-container 3s;\n    display: flex;\n    flex-direction: column;\n    // justify-content: center;\n    align-items: center;\n    position:relative;\n    .title-blue{\n        margin: 2rem;\n    }\n    .form{\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        // justify-content: center;\n        align-items: center;\n        .question-discription{\n            width:90%;\n            height: 100px;\n            background: rgb(228, 228, 228);\n            margin-top: 1rem;\n            padding: 0.5rem;\n            text-align: left;\n            white-space: pre-wrap;\n            overflow-y: scroll;\n\n        }\n        .line{\n            width: 80%;\n            border-bottom: 0.2rem solid $dark-blue;\n            margin-top: 2rem;\n            margin-bottom: 2rem;\n        }\n        .answer-wraper{\n            width: 100%;\n            .title-blue{\n                margin: 0;\n            }\n            .form-text{\n                background: $back-white;\n                padding: 1rem;\n                width: 80%;\n                height:10rem;\n                border: 0.1rem solid $base-color;\n                border-radius: 1vh;\n                resize: none;\n                transition: .5s;\n            }\n            .form-text:focus{\n                outline: none;\n                border: solid $middle-blue;\n            }\n        }\n        .image{\n            width:80%;\n            display:flex;\n            // align-items: left;  \n            margin:1rem;\n            // justify-content: flex-start;\n        }\n        .button-group{\n            width: 80%;\n            display:flex;\n            margin:1rem;\n            justify-content: flex-end;\n            .cancel{\n                border: solid $lite-gray;\n                padding: 0.5rem;\n                transition: 0.5s;\n            }\n            .cancel:hover{\n                background: rgb(196, 195, 195);\n            }\n            .btn-tr-black-base-sq{\n                margin-left: 0.8rem;\n                padding-right: 0.7rem;\n                padding-left: 0.7rem;\n                transition: 0.5s;\n            }\n            .btn-tr-black-base-sq:hover{\n                background: $base-color;\n                color: white;\n                font-weight: bold;\n            }\n        }\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}