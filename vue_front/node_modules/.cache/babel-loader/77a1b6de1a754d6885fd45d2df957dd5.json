{"remainingRequest":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/babel-loader/lib/index.js!/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/ossan/git-clone/quiz_project/vue_front/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue?vue&type=template&id=86beb2ec&scoped=true","dependencies":[{"path":"/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue","mtime":1651036188513},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/babel.config.js","mtime":1643442797713},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHdpdGhNb2RpZmllcnMgYXMgX3dpdGhNb2RpZmllcnMsIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gInZ1ZSI7Cgp2YXIgX3dpdGhTY29wZUlkID0gZnVuY3Rpb24gX3dpdGhTY29wZUlkKG4pIHsKICByZXR1cm4gX3B1c2hTY29wZUlkKCJkYXRhLXYtODZiZWIyZWMiKSwgbiA9IG4oKSwgX3BvcFNjb3BlSWQoKSwgbjsKfTsKCnZhciBfaG9pc3RlZF8xID0gewogIGNsYXNzOiAidGh1bWJuYWlsLXdyYXBwZXIgbC13cmFwcGVyIgp9Owp2YXIgX2hvaXN0ZWRfMiA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJjcm9wcGVyLW91dGVyLXdyYXBwZXIiCn07CnZhciBfaG9pc3RlZF8zID0gewogIGNsYXNzOiAiY3JvcHBlcmlubmVyLXdyYXBwZXIiCn07CnZhciBfaG9pc3RlZF80ID0gWyJzcmMiXTsKdmFyIF9ob2lzdGVkXzUgPSB7CiAgY2xhc3M6ICJidXR0b24tY29udGFpbmVyIgp9OwoKdmFyIF9ob2lzdGVkXzYgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImJ1dHRvbiIsIHsKICAgIGNsYXNzOiAiYnRuLWJhc2Utd2hpdGUtZGItc3EiCiAgfSwgInNhdmUiLCAtMQogIC8qIEhPSVNURUQgKi8KICApOwp9KTsKCnZhciBfaG9pc3RlZF83ID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZChmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBudWxsLCBbLyojX19QVVJFX18qL19jcmVhdGVDb21tZW50Vk5vZGUoIiA8ZGl2PlxuICAgICAgICAgICAgICAgIDxpbWcgaWQ9XCJpbWFnZVwiIHNyYz1cIkAvYXNzZXRzL2xvZ28ucG5nXCI+XG4gICAgICAgICAgICA8L2Rpdj4gIildLCAtMQogIC8qIEhPSVNURUQgKi8KICApOwp9KTsKCmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImZvcm0iLCB7CiAgICBvblN1Ym1pdDogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSBfd2l0aE1vZGlmaWVycyhmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy51c2VyVXBkYXRlICYmICRvcHRpb25zLnVzZXJVcGRhdGUuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9LCBbInByZXZlbnQiXSkpCiAgfSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImlucHV0IiwgewogICAgaWQ6ICJmaWxlVXBsb2FkIiwKICAgIHR5cGU6ICJmaWxlIiwKICAgIG9uQ2hhbmdlOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLmdldEltYWdlICYmICRvcHRpb25zLmdldEltYWdlLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSksCiAgICBoaWRkZW46ICIiLAogICAgZW5jdHlwZTogIm11bHRpcGFydC9mb3JtLWRhdGEiCiAgfSwgbnVsbCwgMzIKICAvKiBIWURSQVRFX0VWRU5UUyAqLwogICksICRkYXRhLnNlbGVjdGVkRmlsZSA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzIsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8zLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaW1nIiwgewogICAgcmVmOiAiaW1hZ2UiLAogICAgc3JjOiAkZGF0YS5zZWxlY3RlZEZpbGUsCiAgICBzdHlsZTogewogICAgICAid2lkdGgiOiAiMzAwcHgiLAogICAgICAiaGVpZ2h0IjogIjMwMHB4IgogICAgfQogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgX2hvaXN0ZWRfNCldKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNSwgW19ob2lzdGVkXzYsICRkYXRhLnNlbGVjdGVkRmlsZSA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImJ1dHRvbiIsIHsKICAgIGtleTogMCwKICAgIGNsYXNzOiAiYnRuLXRyLXdoaXRlLWJhc2Utc3EiLAogICAgb25DbGljazogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy5jaGFuY2VsICYmICRvcHRpb25zLmNoYW5jZWwuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KQogIH0sICJjaGFuY2VsIikpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpXSldKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSldLCAzMgogIC8qIEhZRFJBVEVfRVZFTlRTICovCiAgKSwgX2hvaXN0ZWRfN10pOwp9"},{"version":3,"sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue"],"names":[],"mappings":";;;;;;;AACS,EAAA,KAAK,EAAC;;;;AAGE,EAAA,KAAK,EAAC;;;AACF,EAAA,KAAK,EAAC;;;;AAGN,EAAA,KAAK,EAAC;;;;sBACP,mBAAA,CAAkD,QAAlD,EAAkD;AAA1C,IAAA,KAAK,EAAC;AAAoC,GAAlD,EAAqC,MAArC,EAAyC,CAAA;AAAA;AAAzC,G;;;;sBAKZ,mBAAA,CAIM,KAJN,EAIM,IAJN,EAIM,C,aAHF,mBAAA,CAAA,2FAAA,CAGE,CAJN,E;;AAAA,G;;;;uBAbJ,mBAAA,CAkBM,KAlBN,EAAA,UAAA,EAkBM,CAjBF,mBAAA,CAWO,MAXP,EAWO;AAXA,IAAA,QAAM,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,cAAA,CAAA;AAAA,aAAU,QAAA,CAAA,UAAA,IAAA,QAAA,CAAA,UAAA,OAAA,QAAA,YAAV;AAAA,KAAA,EAAoB,CAAA,SAAA,CAApB,CAAA;AAWN,GAXP,E,CACI,mBAAA,CAA2F,OAA3F,EAA2F;AAApF,IAAA,EAAE,EAAC,YAAiF;AAApE,IAAA,IAAI,EAAC,MAA+D;AAAvD,IAAA,QAAM,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,QAAA,IAAA,QAAA,CAAA,QAAA,OAAA,QAAA,YAAF;AAAA,KAAA,CAAiD;AAArC,IAAA,MAAM,EAAN,EAAqC;AAA9B,IAAA,OAAO,EAAC;AAAsB,GAA3F,E,IAAA,E;;AAAA,G,EACyC,KAAA,CAAA,Y,kBAAzC,mBAAA,CAQM,KARN,EAAA,UAAA,EAQM,CAPF,mBAAA,CAEM,KAFN,EAAA,UAAA,EAEM,CADF,mBAAA,CAA0E,KAA1E,EAA0E;AAArE,IAAA,GAAG,EAAC,OAAiE;AAAxD,IAAA,GAAG,EAAE,KAAA,CAAA,YAAmD;AAArC,IAAA,KAAoC,EAApC;AAAA,eAAA,OAAA;AAAA,gBAAA;AAAA;AAAqC,GAA1E,E,IAAA,E;;AAAA,I,UAAA,CACE,CAFN,CAOE,EAJF,mBAAA,CAGM,KAHN,EAAA,UAAA,EAGM,CAFF,UAEE,EADyC,KAAA,CAAA,Y,kBAA3C,mBAAA,CAA0F,QAA1F,EAA0F;UAAA;AAAlF,IAAA,KAAK,EAAC,sBAA4E;AAAhC,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,OAAA,IAAA,QAAA,CAAA,OAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAA2B,GAA1F,EAA0E,SAA1E,C,qCACE,CAHN,CAIE,CARN,C,sCAFJ,E;;AAAA,GAiBE,EALF,UAKE,CAlBN,C","sourcesContent":["<template>\n    <div class='thumbnail-wrapper l-wrapper'>\n        <form @submit.prevent='userUpdate'>\n            <input id=\"fileUpload\" type=\"file\" @change='getImage' hidden enctype=\"multipart/form-data\">\n            <div class=\"cropper-outer-wrapper\" v-if=\"selectedFile\">\n                <div class='cropperinner-wrapper'>\n                    <img ref='image' :src=\"selectedFile\" style=\"width: 300px; height: 300px;\">\n                </div>\n                <div class=\"button-container\">\n                    <button class='btn-base-white-db-sq'>save</button>\n                    <button class='btn-tr-white-base-sq' v-if='selectedFile' @click='chancel'>chancel</button>\n                </div>\n            </div>\n        </form>\n        <div>\n            <!-- <div>\n                <img id=\"image\" src=\"@/assets/logo.png\">\n            </div> -->\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport Cropper from 'cropperjs';\nexport default {\n    data(){\n        return{\n            file:'',\n            image:'',\n            selectedFile:null,\n            compoHandle: false,\n            cropper:{},\n            destination:{},\n            inputFile:'',\n        }\n    },\n    mounted(){\n        // this.cropper()\n        this.autoClick()\n    },\n    methods:{\n        async getImage(event){\n            console.log('event',event)\n            this.selectedFile = URL.createObjectURL(event.target.files[0])\n            this.image = event.target.files[0]\n            await console.log(this.image,'img',this.selectedFile)\n            this.imageCropper()\n        },\n        async imageCropper(){\n            this.cropper = new Cropper(this.$refs.image, {\n            zoomable: true,\n            scalable: false,\n            zoomOnTouch: true,\n            aspectRatio: 1,\n            dragMode: 'move',\n            minContainerHeight:400,\n            crop(event) {\n                    console.log(event.detail.x);\n                    console.log(event.detail.y);\n                    console.log(event.detail.width);\n                    console.log(event.detail.height);\n                    console.log(event.detail.rotate);\n                    console.log(event.detail.scaleX);\n                    console.log(event.detail.scaleY);\n                },\n            })\n        },\n        chancel(){\n            this.selectedFile=null\n            this.showThumbnailFalse()\n        },\n        autoClick(){\n            document.getElementById(\"fileUpload\").click()\n            this.inputFile = document.getElementById(\"fileUpload\");\n            document.body.onfocus = this.getEvent\n        },\n        getEvent(){\n            setTimeout(() => {\n                if (this.inputFile.value.length) {\n                \n                } else {\n                this.showThumbnailFalse()\n                }\n                document.body.onfocus = null;\n            }, 500);\n        },\n        openFileOnClick(){\n            document.getElementById(\"fileUpload\").value = \"\";\n            document.getElementById(\"fileUpload\").files.length = 0;            \n            document.getElementById(\"fileUpload\").click();\n            if(document.getElementById(\"fileUpload\").files.length >= 1){\n                //Do something \n            }\n            else{\n                this.showThumbnailFalse()\n                //Cancel button has been called.\n            }\n        },\n        // getCroppedURL(){\n        //     console.log('croppedURL')\n        //     document.getElementById('crop-btn').addEventListener('click', function () {\n        //     resultImgUrl = this.cropper.getCroppedCanvas().toDataURL();\n        //     var result = document.getElementById('result-img');\n        //     result.src = resultImgUrl;\n        //      });\n        // },\n        async userUpdate(){\n            const canvas = this.cropper.getCroppedCanvas({\n                width: 160,\n                height: 90,\n                minCropBoxHeight: 300,\n                minCropBoxWidth: 300,\n                maxWidth: 4096,\n                maxHeight: 4096,\n                fillColor: '#fff',\n                imageSmoothingEnabled: false,\n                imageSmoothingQuality: 'high',\n                });\n            canvas.toBlob(async (blob) => {\n            const formData = new FormData();\n            formData.append('thumbnail',blob, `${this.image}.png`),\n            console.log('getthumb',formData.get('thumbnail')),\n            await axios.patch(`/api/user/${this.$route.params.uid}`,\n                formData\n            )\n            }, 'image/png')\n            // this.$router.go({path: this.$router.currentRoute.path, force: true})\n        },\n        showThumbnailFalse(){\n            this.$emit('showThumbnailFalse')\n        }\n    }\n}\n</script>\n\n<style scoped >\n/* @import \"style/_variables.scss\"; */\n\n.thumbnail-wrapper{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    /* background: ; */\n    overflow:scroll;  \n}\n.cropper-view-box,\n    .cropper-face {\n      border-radius: 50%;\n      cursor: grab;\n      outline: initial;\n    }\n    .cropper-face:active {\n      cursor: grabbing;\n    }\n.button-container{\n\n}\n</style>"],"sourceRoot":""}]}