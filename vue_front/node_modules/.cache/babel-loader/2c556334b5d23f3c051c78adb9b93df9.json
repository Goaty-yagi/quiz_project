{"remainingRequest":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/babel-loader/lib/index.js!/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/ossan/git-clone/quiz_project/vue_front/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue?vue&type=template&id=86beb2ec","dependencies":[{"path":"/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue","mtime":1651582197192},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/babel.config.js","mtime":1643442797713},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHdpdGhNb2RpZmllcnMgYXMgX3dpdGhNb2RpZmllcnMgfSBmcm9tICJ2dWUiOwp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogInRodW1ibmFpbC13cmFwcGVyIGwtd3JhcHBlciIKfTsKdmFyIF9ob2lzdGVkXzIgPSB7CiAga2V5OiAwLAogIGNsYXNzOiAiY3JvcHBlci1vdXRlci13cmFwcGVyIgp9Owp2YXIgX2hvaXN0ZWRfMyA9IHsKICBjbGFzczogImNyb3BwZXJpbm5lci13cmFwcGVyIgp9Owp2YXIgX2hvaXN0ZWRfNCA9IFsic3JjIl07CnZhciBfaG9pc3RlZF81ID0gewogIGNsYXNzOiAidGh1bWJuYWlsLWJ1dHRvbi1jb250YWluZXIiCn07Cgp2YXIgX2hvaXN0ZWRfNiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgY2xhc3M6ICJidG4tYmFzZS13aGl0ZS1kYi1zcSB0aHVtYm5haWwtc2F2ZS1idXR0b24iCn0sICJzYXZlIiwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzcgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgbnVsbCwgWy8qI19fUFVSRV9fKi9fY3JlYXRlQ29tbWVudFZOb2RlKCIgPGRpdj5cbiAgICAgICAgICAgICAgICA8aW1nIGlkPVwiaW1hZ2VcIiBzcmM9XCJAL2Fzc2V0cy9sb2dvLnBuZ1wiPlxuICAgICAgICAgICAgPC9kaXY+ICIpXSwgLTEKLyogSE9JU1RFRCAqLwopOwoKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCBfaG9pc3RlZF8xLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZm9ybSIsIHsKICAgIG9uU3VibWl0OiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9IF93aXRoTW9kaWZpZXJzKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLnVzZXJVcGRhdGUgJiYgJG9wdGlvbnMudXNlclVwZGF0ZS5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0sIFsicHJldmVudCJdKSkKICB9LCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaW5wdXQiLCB7CiAgICBpZDogImZpbGVVcGxvYWQiLAogICAgdHlwZTogImZpbGUiLAogICAgb25DaGFuZ2U6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuZ2V0SW1hZ2UgJiYgJG9wdGlvbnMuZ2V0SW1hZ2UuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KSwKICAgIGhpZGRlbjogIiIsCiAgICBlbmN0eXBlOiAibXVsdGlwYXJ0L2Zvcm0tZGF0YSIKICB9LCBudWxsLCAzMgogIC8qIEhZRFJBVEVfRVZFTlRTICovCiAgKSwgJGRhdGEuc2VsZWN0ZWRGaWxlID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMiwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJpbWciLCB7CiAgICByZWY6ICJpbWFnZSIsCiAgICBzcmM6ICRkYXRhLnNlbGVjdGVkRmlsZSwKICAgIHN0eWxlOiB7CiAgICAgICJ3aWR0aCI6ICIzMDBweCIsCiAgICAgICJoZWlnaHQiOiAiMzAwcHgiCiAgICB9CiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBfaG9pc3RlZF80KV0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF81LCBbX2hvaXN0ZWRfNiwgJGRhdGEuc2VsZWN0ZWRGaWxlID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiYnV0dG9uIiwgewogICAga2V5OiAwLAogICAgY2xhc3M6ICJidG4tdHItd2hpdGUtYmFzZS1zcSB0aHVtYm5haWwtY2FuY2VsLWJ1dHRvbiIsCiAgICBvbkNsaWNrOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLmNoYW5jZWwgJiYgJG9wdGlvbnMuY2hhbmNlbC5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgImNhbmNlbCIpKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKV0pXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpXSwgMzIKICAvKiBIWURSQVRFX0VWRU5UUyAqLwogICksIF9ob2lzdGVkXzddKTsKfQ=="},{"version":3,"sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue"],"names":[],"mappings":";;AACS,EAAA,KAAK,EAAC;;;;AAGE,EAAA,KAAK,EAAC;;;AACF,EAAA,KAAK,EAAC;;;;AAGN,EAAA,KAAK,EAAC;;;8BACP,mBAAA,CAAwE,QAAxE,EAAwE;AAAhE,EAAA,KAAK,EAAC;AAA0D,CAAxE,EAA2D,MAA3D,EAA+D,CAAA;AAAA;AAA/D,C;;8BAKZ,mBAAA,CAIM,KAJN,EAIM,IAJN,EAIM,C,aAHF,mBAAA,CAAA,2FAAA,CAGE,CAJN,E;;AAAA,C;;;uBAbJ,mBAAA,CAkBM,KAlBN,EAAA,UAAA,EAkBM,CAjBF,mBAAA,CAWO,MAXP,EAWO;AAXA,IAAA,QAAM,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,cAAA,CAAA;AAAA,aAAU,QAAA,CAAA,UAAA,IAAA,QAAA,CAAA,UAAA,OAAA,QAAA,YAAV;AAAA,KAAA,EAAoB,CAAA,SAAA,CAApB,CAAA;AAWN,GAXP,E,CACI,mBAAA,CAA2F,OAA3F,EAA2F;AAApF,IAAA,EAAE,EAAC,YAAiF;AAApE,IAAA,IAAI,EAAC,MAA+D;AAAvD,IAAA,QAAM,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,QAAA,IAAA,QAAA,CAAA,QAAA,OAAA,QAAA,YAAF;AAAA,KAAA,CAAiD;AAArC,IAAA,MAAM,EAAN,EAAqC;AAA9B,IAAA,OAAO,EAAC;AAAsB,GAA3F,E,IAAA,E;;AAAA,G,EACyC,KAAA,CAAA,Y,kBAAzC,mBAAA,CAQM,KARN,EAAA,UAAA,EAQM,CAPF,mBAAA,CAEM,KAFN,EAAA,UAAA,EAEM,CADF,mBAAA,CAA0E,KAA1E,EAA0E;AAArE,IAAA,GAAG,EAAC,OAAiE;AAAxD,IAAA,GAAG,EAAE,KAAA,CAAA,YAAmD;AAArC,IAAA,KAAoC,EAApC;AAAA,eAAA,OAAA;AAAA,gBAAA;AAAA;AAAqC,GAA1E,E,IAAA,E;;AAAA,I,UAAA,CACE,CAFN,CAOE,EAJF,mBAAA,CAGM,KAHN,EAAA,UAAA,EAGM,CAFF,UAEE,EADiE,KAAA,CAAA,Y,kBAAnE,mBAAA,CAAiH,QAAjH,EAAiH;UAAA;AAAzG,IAAA,KAAK,EAAC,8CAAmG;AAA/B,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,OAAA,IAAA,QAAA,CAAA,OAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAA0B,GAAjH,EAAkG,QAAlG,C,qCACE,CAHN,CAIE,CARN,C,sCAFJ,E;;AAAA,GAiBE,EALF,UAKE,CAlBN,C","sourcesContent":["<template>\n    <div class='thumbnail-wrapper l-wrapper'>\n        <form @submit.prevent='userUpdate'>\n            <input id=\"fileUpload\" type=\"file\" @change='getImage' hidden enctype=\"multipart/form-data\">\n            <div class=\"cropper-outer-wrapper\" v-if=\"selectedFile\">\n                <div class='cropperinner-wrapper'>\n                    <img ref='image' :src=\"selectedFile\" style=\"width: 300px; height: 300px;\">\n                </div>\n                <div class=\"thumbnail-button-container\">\n                    <button class='btn-base-white-db-sq thumbnail-save-button'>save</button>\n                    <button class='btn-tr-white-base-sq thumbnail-cancel-button' v-if='selectedFile' @click='chancel'>cancel</button>\n                </div>\n            </div>\n        </form>\n        <div>\n            <!-- <div>\n                <img id=\"image\" src=\"@/assets/logo.png\">\n            </div> -->\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport Cropper from 'cropperjs';\nexport default {\n    data(){\n        return{\n            file:'',\n            image:'',\n            selectedFile:null,\n            compoHandle: false,\n            cropper:{},\n            destination:{},\n            inputFile:'',\n        }\n    },\n    mounted(){\n        // this.cropper()\n        this.autoClick()\n    },\n    methods:{\n        async getImage(event){\n            console.log('event',event)\n            this.selectedFile = URL.createObjectURL(event.target.files[0])\n            this.image = event.target.files[0]\n            await console.log(this.image,'img',this.selectedFile)\n            this.imageCropper()\n        },\n        async imageCropper(){\n            this.cropper = new Cropper(this.$refs.image, {\n            zoomable: true,\n            scalable: false,\n            zoomOnTouch: true,\n            aspectRatio: 1,\n            dragMode: 'move',\n            minContainerHeight:400,\n            crop(event) {\n                    console.log(event.detail.x);\n                    console.log(event.detail.y);\n                    console.log(event.detail.width);\n                    console.log(event.detail.height);\n                    console.log(event.detail.rotate);\n                    console.log(event.detail.scaleX);\n                    console.log(event.detail.scaleY);\n                },\n            })\n        },\n        chancel(){\n            this.selectedFile=null\n            this.showThumbnailFalse()\n        },\n        autoClick(){\n            document.getElementById(\"fileUpload\").click()\n            this.inputFile = document.getElementById(\"fileUpload\");\n            document.body.onfocus = this.getEvent\n        },\n        getEvent(){\n            setTimeout(() => {\n                if (this.inputFile.value.length) {\n                \n                } else {\n                this.showThumbnailFalse()\n                }\n                document.body.onfocus = null;\n            }, 500);\n        },\n        openFileOnClick(){\n            document.getElementById(\"fileUpload\").value = \"\";\n            document.getElementById(\"fileUpload\").files.length = 0;            \n            document.getElementById(\"fileUpload\").click();\n            if(document.getElementById(\"fileUpload\").files.length >= 1){\n                //Do something \n            }\n            else{\n                this.showThumbnailFalse()\n                //Cancel button has been called.\n            }\n        },\n        // getCroppedURL(){\n        //     console.log('croppedURL')\n        //     document.getElementById('crop-btn').addEventListener('click', function () {\n        //     resultImgUrl = this.cropper.getCroppedCanvas().toDataURL();\n        //     var result = document.getElementById('result-img');\n        //     result.src = resultImgUrl;\n        //      });\n        // },\n        async userUpdate(){\n            const canvas = this.cropper.getCroppedCanvas({\n                width: 160,\n                height: 90,\n                minCropBoxHeight: 300,\n                minCropBoxWidth: 300,\n                maxWidth: 4096,\n                maxHeight: 4096,\n                fillColor: '#fff',\n                imageSmoothingEnabled: false,\n                imageSmoothingQuality: 'high',\n                });\n            await canvas.toBlob(async (blob) => {\n            const formData = new FormData();\n            formData.append('thumbnail',blob, `${this.image}.png`),\n            console.log('getthumb',formData.get('thumbnail')),\n            axios.patch(`/api/user/${this.$route.params.uid}`,\n                formData\n            )\n            }, 'image/png')\n            this.showThumbnailFalse()\n            location.reload()\n            // this.$router.go({path: this.$router.currentRoute.path, force: true})\n        },\n        showThumbnailFalse(){\n            this.$emit('showThumbnailFalse')\n        }\n    }\n}\n</script>\n\n<style  lang=\"scss\">\n// not scoped for cropper\n@import \"style/_variables.scss\";\n\n.thumbnail-wrapper{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    /* background: ; */\n    overflow:scroll;  \n}\n.cropper-view-box,\n    .cropper-face {\n      border-radius: 50%;\n      cursor: grab;\n      outline: initial;\n    }\n    .cropper-face:active {\n      cursor: grabbing;\n    }\n.thumbnail-button-container{\n    display: flex;\n    justify-content: center;\n    margin-top: 1rem;\n    .thumbnail-save-button{\n        display: flex;\n        justify-content: center;\n        font-size: 1.2rem;\n        margin-right: 0.5rem;\n        min-width: 5rem;\n        min-height: 2rem;\n        font-weight: bold;\n    }\n    .thumbnail-cancel-button{\n        display: flex;\n        justify-content: center;\n        font-size: 1.2rem;\n        margin-left: 0.5rem;\n        min-width: 5rem;\n        min-height: 2rem;\n        font-weight: bold;\n    }\n}\n</style>"],"sourceRoot":""}]}