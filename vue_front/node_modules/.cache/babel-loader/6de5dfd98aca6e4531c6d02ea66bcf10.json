{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport default {\n  name: \"Result\",\n  props: ['question_length', 'rerultAnswer'],\n  data: function data() {\n    return {\n      resultDetailslice: 3,\n      resultDetail: false\n    };\n  },\n  methods: {\n    numOfTrue: function numOfTrue(answered_array) {\n      var counter = 0;\n\n      var _iterator = _createForOfIteratorHelper(answered_array),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var t = _step.value;\n\n          if (t == true) {\n            counter += 1;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return counter;\n    },\n    getPercentage: function getPercentage(answer, question_length) {\n      return Math.round(answer / question_length * 100);\n    },\n    getResultFont: function getResultFont(result) {\n      if (result == true) {\n        return \"result-font-green\";\n      } else if (result == false) {\n        return \"result-font-red\";\n      }\n    },\n    returnFont: function returnFont(boolean) {\n      if (boolean == true) {\n        return \"far fa-circle\";\n      } else if (boolean == false) {\n        return \"fas fa-times\";\n      }\n    },\n    getJPResult: function getJPResult(result) {\n      if (result == true) {\n        return '正解';\n      } else {\n        return '不正解';\n      }\n    },\n    resultDetailHandler: function resultDetailHandler(slice) {\n      if (slice <= 5) {\n        console.log(this.resultDetailslice);\n        this.resultDetailslice = 100;\n        this.resultDetail = true;\n      } else {\n        this.resultDetailslice = 3;\n        this.resultDetail = false;\n      }\n    },\n    storeReset: function storeReset() {\n      this.$store.commit('reset');\n    },\n    reset: function reset() {\n      location.reload();\n    },\n    showDetail: function showDetail() {\n      this.$emit('show');\n    }\n  }\n};","map":{"version":3,"mappings":";AAsDA,eAAe;EACXA,IAAI,EAAC,QADM;EAEXC,KAAK,EAAC,CACF,iBADE,EAEF,cAFE,CAFK;EAMXC,IANW,kBAML;IACF,OAAM;MACFC,iBAAiB,EAAC,CADhB;MAEFC,YAAY,EAAE;IAFZ,CAAN;EAIH,CAXU;EAYXC,OAAO,EAAC;IACJC,SADI,qBACMC,cADN,EACqB;MACrB,IAAIC,OAAM,GAAI,CAAd;;MADqB,2CAEPD,cAFO;MAAA;;MAAA;QAErB,oDAA6B;UAAA,IAApBE,CAAoB;;UACzB,IAAGA,KAAK,IAAR,EAAa;YACbD,OAAM,IAAK,CAAX;UACA;QACH;MANoB;QAAA;MAAA;QAAA;MAAA;;MAMpB,OAAOA,OAAP;IACJ,CARG;IASJE,aATI,yBASUC,MATV,EASiBC,eATjB,EASiC;MACjC,OAAOC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAACC,eAAP,GAAyB,GAApC,CAAP;IACH,CAXG;IAYJG,aAZI,yBAYUC,MAZV,EAYiB;MACjB,IAAGA,MAAK,IAAK,IAAb,EAAkB;QACd,OAAO,mBAAP;MACJ,CAFA,MAGK,IAAGA,MAAK,IAAK,KAAb,EAAmB;QACpB,OAAO,iBAAP;MACJ;IACH,CAnBG;IAoBJC,UApBI,sBAoBOC,OApBP,EAoBe;MACf,IAAGA,OAAM,IAAK,IAAd,EAAmB;QACf,OAAO,eAAP;MACJ,CAFA,MAGK,IAAGA,OAAM,IAAK,KAAd,EAAoB;QACrB,OAAO,cAAP;MACJ;IACH,CA3BG;IA4BJC,WA5BI,uBA4BQH,MA5BR,EA4Be;MACf,IAAIA,MAAK,IAAK,IAAd,EAAmB;QACf,OAAO,IAAP;MACH,CAFD,MAEK;QACD,OAAM,KAAN;MACJ;IACH,CAlCG;IAmCJI,mBAnCI,+BAmCgBC,KAnChB,EAmCsB;MACtB,IAAGA,KAAI,IAAK,CAAZ,EAAc;QACVC,OAAO,CAACC,GAAR,CAAY,KAAKpB,iBAAjB;QACA,KAAKA,iBAAL,GAAyB,GAAzB;QACA,KAAKC,YAAL,GAAoB,IAApB;MACJ,CAJA,MAKI;QACA,KAAKD,iBAAL,GAAyB,CAAzB;QACA,KAAKC,YAAL,GAAoB,KAApB;MACJ;IACH,CA7CG;IA8CJoB,UA9CI,wBA8CQ;MACR,KAAKC,MAAL,CAAYC,MAAZ,CAAmB,OAAnB;IACH,CAhDG;IAiDJC,KAAK,EAAE,iBAAY;MACfC,QAAQ,CAACC,MAAT;IACH,CAnDG;IAoDJC,UApDI,wBAoDQ;MACR,KAAKC,KAAL,CAAW,MAAX;IACJ;EAtDI;AAZG,CAAf","names":["name","props","data","resultDetailslice","resultDetail","methods","numOfTrue","answered_array","counter","t","getPercentage","answer","question_length","Math","round","getResultFont","result","returnFont","boolean","getJPResult","resultDetailHandler","slice","console","log","storeReset","$store","commit","reset","location","reload","showDetail","$emit"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/quiz_components/Result.vue"],"sourcesContent":["<template>\n  <div class='result-compo'>\n      <div class='box is-paddingless pb-4'> \n        <div class='button my-5 has-background-info-light is-centered is-static'>\n            <p class=\"title is 3 has-text-danger\">結果発表</p>          \n        </div>\n        <div>\n            <p class=\"mx-5 is-inline-block subtitle is 4\">{{ question_length }}問中</p>\n            <p class=\"is-inline-block has-text-danger-dark title is 4\">{{ numOfTrue(rerultAnswer) }} 問正解</p>\n            <div>\n                <p class=\"subtitle is 5 button is-rounded is-static\"> 正解率 {{ getPercentage(numOfTrue(rerultAnswer),question_length) }}%</p>\n            </div>\n        </div>\n    </div>\n    <section class=\"section\">\n        <div class='result pt-6'>\n            <div class=\"columns is-multiline is-vcentered is-mobile is-centered\"\n                v-for=\"(result,resultindex) in rerultAnswer.slice(0,resultDetailslice)\"\n                v-bind:key=\"resultindex\"\n                style='margin-top: -2rem'\n                id='result-column'>\n                <div class=\"column\">\n                    <p class='subtitle'>{{ resultindex+ 1 }} 問目</p>\n                </div>\n                <div class=\"column result-all\">\n                    <div class='result-font' :class='getResultFont(result)'>\n                    <i id='result-font' :class='returnFont(result)'></i>\n                    </div>\n                </div>\n                <div class=\"column\" id='resultString'>\n                    <p class='subtitle is 4'>{{ getJPResult(result) }}</p>\n                </div>\n            </div>\n            <div style='margin-top: -2rem'>\n                <div class='mt-6' v-if='!resultDetail' @click='resultDetailHandler(resultDetailslice)'>\n                    <i class=\"fas fa-chevron-circle-down fa-2x\" style='color: lightgray'></i>  \n                </div>\n\n                <div v-if='resultDetail' @click='resultDetailHandler(resultDetailslice)'>\n                    <i class=\"fas fa-chevron-circle-up fa-2x\" style='color: lightgray'></i> \n                </div>\n            </div>\n        </div>\n        <div>\n            <button @click='showDetail' class=\"button mt-2 is-info is-rounded\">詳細を見る</button>\n        </div>    \n    </section>\n    \n        <router-link to=\"/\" @click='storeReset' class=\"mx-2 button is-primary is-outlined\">戻る</router-link>\n        <div @click='reset' class=\"mx-2 button is-warning is-light\">もう一度</div>\n  </div>\n</template>\n\n<script>\nexport default {\n    name:\"Result\",\n    props:[\n        'question_length',\n        'rerultAnswer'\n    ],\n    data(){\n        return{\n            resultDetailslice:3,\n            resultDetail: false,\n        }\n    },\n    methods:{\n        numOfTrue(answered_array){\n            let counter = 0\n            for (let t of answered_array){\n                if(t == true){\n                counter += 1\n                }\n            }return counter\n        },\n        getPercentage(answer,question_length){\n            return Math.round(answer/question_length * 100)\n        },\n        getResultFont(result){\n            if(result == true){\n                return \"result-font-green\"\n            }\n            else if(result == false){\n                return \"result-font-red\"\n            }\n        },\n        returnFont(boolean){\n            if(boolean == true){\n                return \"far fa-circle\"\n            }\n            else if(boolean == false){\n                return \"fas fa-times\"\n            }\n        },\n        getJPResult(result){\n            if (result == true){\n                return '正解'\n            }else{\n                return'不正解'\n            }\n        },\n        resultDetailHandler(slice){\n            if(slice <= 5){\n                console.log(this.resultDetailslice)\n                this.resultDetailslice = 100\n                this.resultDetail = true\n            }\n            else{\n                this.resultDetailslice = 3\n                this.resultDetail = false\n            }\n        },\n        storeReset(){\n            this.$store.commit('reset')\n        },\n        reset: function () {\n            location.reload()\n        },\n        showDetail(){\n            this.$emit('show')\n        }\n    }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}