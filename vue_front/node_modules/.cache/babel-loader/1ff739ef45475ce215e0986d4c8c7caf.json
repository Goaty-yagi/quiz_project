{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      description: '',\n      alert: false\n    };\n  },\n\n  props: ['answerId', 'reply', 'handleNotifications'],\n\n  mounted() {\n    console.log('answerMounted', this.reply);\n    this.$store.commit('showModalTrue');\n  },\n\n  beforeUnmount() {\n    this.$store.commit('showModalFalse');\n  },\n\n  methods: {\n    // addAnswer(){\n    //     console.log('start add')\n    //     axios({\n    //         method: 'post',\n    //         url: '/api/board/reply/create/',\n    //         data: {\n    //             description: this.description,\n    //             user: this.$store.state.signup.user.uid,\n    //             answer: this.answerId\n    //         }\n    //       })\n    //       console.log('end add')\n    //       this.$emit('handleNotifications','reply')\n    //       this.$emit('getDetail')\n    //       this.$emit('handleShowReplyPage')\n    //     //   this.$emit('handleshowAnswerPage')\n    //     //   this.$router.go({path: this.$router.currentRoute.path, force: true})\n    //  },\n    resetNotifications() {\n      this.alert = false;\n    },\n\n    descriptionCheck() {\n      if (this.description == '') {\n        this.alert = true;\n        setTimeout(this.resetNotifications, 3000);\n      }\n    },\n\n    async replyPost() {\n      await axios({\n        method: 'post',\n        url: '/api/board/reply/create/',\n        data: {\n          description: this.description,\n          user: this.$store.state.signup.user.uid,\n          answer: this.answerId\n        }\n      });\n    },\n\n    addAnswer() {\n      console.log('start add');\n      this.descriptionCheck();\n\n      if (this.alert == false) {\n        this.replyPost();\n        this.$store.dispatch(\"handleNotifications\", 'reply'); // this.$emit('handleNotifications','reply')\n\n        this.$emit('getDetail');\n        this.$emit('handleShowReplyPage');\n        console.log('end-reply');\n      } //   this.$emit('handleshowAnswerPage')\n      //   this.$router.go({path: this.$router.currentRoute.path, force: true})\n\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAqCA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe;EACXC,IAAI,GAAE;IACF,OAAM;MACFC,WAAW,EAAC,EADV;MAEFC,KAAK,EAAE;IAFL,CAAN;EAIH,CANU;;EAOXC,KAAK,EAAC,CACF,UADE,EAEF,OAFE,EAGF,qBAHE,CAPK;;EAYXC,OAAO,GAAE;IACLC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4B,KAAKC,KAAjC;IACA,KAAKC,MAAL,CAAYC,MAAZ,CAAmB,eAAnB;EACH,CAfU;;EAgBXC,aAAa,GAAE;IACX,KAAKF,MAAL,CAAYC,MAAZ,CAAmB,gBAAnB;EACH,CAlBU;;EAmBXE,OAAO,EAAC;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,kBAAkB,GAAE;MAChB,KAAKV,KAAL,GAAa,KAAb;IACH,CArBG;;IAsBJW,gBAAgB,GAAE;MACd,IAAG,KAAKZ,WAAL,IAAkB,EAArB,EAAwB;QACpB,KAAKC,KAAL,GAAa,IAAb;QACAY,UAAU,CAAC,KAAKF,kBAAN,EAA0B,IAA1B,CAAV;MACJ;IACH,CA3BG;;IA4BJ,MAAMG,SAAN,GAAiB;MACb,MAAMhB,KAAK,CAAC;QACRiB,MAAM,EAAE,MADA;QAERC,GAAG,EAAE,0BAFG;QAGRjB,IAAI,EAAE;UACFC,WAAW,EAAE,KAAKA,WADhB;UAEFiB,IAAI,EAAE,KAAKV,MAAL,CAAYW,KAAZ,CAAkBC,MAAlB,CAAyBF,IAAzB,CAA8BG,GAFlC;UAGFC,MAAM,EAAE,KAAKC;QAHX;MAHE,CAAD,CAAX;IASH,CAtCG;;IAuCJC,SAAS,GAAE;MACPnB,OAAO,CAACC,GAAR,CAAY,WAAZ;MACA,KAAKO,gBAAL;;MACA,IAAG,KAAKX,KAAL,IAAY,KAAf,EAAqB;QACjB,KAAKa,SAAL;QACA,KAAKP,MAAL,CAAYiB,QAAZ,CAAqB,qBAArB,EAA4C,OAA5C,EAFiB,CAGjB;;QACA,KAAKC,KAAL,CAAW,WAAX;QACA,KAAKA,KAAL,CAAW,qBAAX;QACArB,OAAO,CAACC,GAAR,CAAY,WAAZ;MACJ,CAVO,CAWP;MACA;;IACF;;EApDE;AAnBG,CAAf","names":["axios","data","description","alert","props","mounted","console","log","reply","$store","commit","beforeUnmount","methods","resetNotifications","descriptionCheck","setTimeout","replyPost","method","url","user","state","signup","uid","answer","answerId","addAnswer","dispatch","$emit"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/board/Reply.vue"],"sourcesContent":["<template>\n    <div class=\"l-wrapper\">\n        <div class=\"l-container\">\n            <div class=\"reply-wrapper\">\n                <div class=\"title-blue\">\n                    <p>コメント</p>\n                </div>\n                <div class=\"comment-wrapper\">\n                    <p>{{ reply }}</p>\n                </div>\n                <!-- <div class=\"question-discription\">\n                    <p>description: {{ questionDescription }}</p>\n                </div> -->\n            </div>\n\n            <div class=\"answer-wrapper\">\n                <div class=\"title-blue\">\n                    <p>返信文</p>\n                </div>\n                <textarea class='form-text' v-model='description' placeholder=\"回答\"/>\n            </div>\n            <div v-if=\"alert\" :class=\"{'notification-red':alert}\">\n                <div class=\"notification-text\">\n                    文章を入力してください。\n                </div>\n            </div>\n            <div class=\"button-group\">\n                <p class=\"cancel\" @click=\"$emit('handleShowReplyPage')\">キャンセル</p>\n                <button class=\"btn-tr-black-base-sq\"\n                 @click=\"addAnswer\" \n                 :disabled='alert'>回答する</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nexport default {\n    data(){\n        return{\n            description:'',\n            alert: false,\n        }\n    },\n    props:[\n        'answerId',\n        'reply',\n        'handleNotifications'\n    ],\n    mounted(){\n        console.log('answerMounted',this.reply)\n        this.$store.commit('showModalTrue')\n    },\n    beforeUnmount(){\n        this.$store.commit('showModalFalse')        \n    },\n    methods:{\n        // addAnswer(){\n        //     console.log('start add')\n        //     axios({\n        //         method: 'post',\n        //         url: '/api/board/reply/create/',\n        //         data: {\n        //             description: this.description,\n        //             user: this.$store.state.signup.user.uid,\n        //             answer: this.answerId\n        //         }\n        //       })\n        //       console.log('end add')\n        //       this.$emit('handleNotifications','reply')\n        //       this.$emit('getDetail')\n        //       this.$emit('handleShowReplyPage')\n        //     //   this.$emit('handleshowAnswerPage')\n        //     //   this.$router.go({path: this.$router.currentRoute.path, force: true})\n        //  },\n        resetNotifications(){\n            this.alert = false\n        },\n        descriptionCheck(){\n            if(this.description==''){\n                this.alert = true\n                setTimeout(this.resetNotifications, 3000)\n            }\n        },\n        async replyPost(){\n            await axios({\n                method: 'post',\n                url: '/api/board/reply/create/',\n                data: {\n                    description: this.description,\n                    user: this.$store.state.signup.user.uid,\n                    answer: this.answerId\n                }\n            })\n        },\n        addAnswer(){\n            console.log('start add')\n            this.descriptionCheck()\n            if(this.alert==false){\n                this.replyPost()\n                this.$store.dispatch(\"handleNotifications\", 'reply')\n                // this.$emit('handleNotifications','reply')\n                this.$emit('getDetail')\n                this.$emit('handleShowReplyPage')\n                console.log('end-reply')\n            }\n            //   this.$emit('handleshowAnswerPage')\n            //   this.$router.go({path: this.$router.currentRoute.path, force: true})\n         },\n    }\n}\n</script>\n\n<style scoped lang='scss'>\n@import \"style/_variables.scss\";\n.l-container{\n    animation: l-container 3s;\n    padding:1rem;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n.reply-wrapper{\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    .title-blue{\n        margin: 1rem;\n    }\n    .comment-wrapper{\n        background: rgb(235, 235, 235);\n        padding: 0.5rem;\n        width: 90%;\n        // margin:0.5rem;\n        text-align: left;\n        white-space: pre-wrap;\n    }\n}\n.answer-wrapper{\n    width: 90%;\n    .title-blue{\n        margin: 1rem;\n    }\n    .form-text{\n        width: 100%;\n        background: $back-white;\n        height: auto;\n        min-height: 100px;\n        border: 0.1rem solid $base-color;\n        border-radius: 1vh;\n        padding: 1rem;\n        resize: none;\n        transition: .5s;\n    }\n    .form-text:focus{\n        outline: none;\n        border: solid $dark-blue;\n    }\n}\n.button-group{\n    width: 80%;\n    display:flex;\n    margin:1rem;\n    justify-content: flex-end;\n    .cancel{\n        border: solid $lite-gray;\n        padding: 0.5rem;\n        transition: 0.5s;\n    }\n    .cancel:hover{\n        background: rgb(196, 195, 195);\n    }\n    .btn-tr-black-base-sq{\n        margin-left: 0.8rem;\n        padding-right: 0.7rem;\n        padding-left: 0.7rem;\n        transition: 0.5s;\n    }\n    .btn-tr-black-base-sq:hover{\n        background: $base-color;\n        color: white;\n        font-weight: bold;\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}