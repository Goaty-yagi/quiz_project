{"ast":null,"code":"import axios from 'axios';\nimport Cropper from 'cropperjs';\nexport default {\n  // set imageType in parent components to check what to do here\n  // if imageTyoe == 'thumbnail' => axios\n  // els if imageType == 'quizQuestion' => return blob\n  props: [\"getDjangouser\", \"minContainerWidth\", \"minContainerHeight\", \"imageType\"],\n\n  data() {\n    return {\n      file: '',\n      image: '',\n      selectedFile: null,\n      compoHandle: false,\n      cropper: {},\n      destination: {},\n      inputFile: '',\n      blob: '',\n      cropperBorder: ''\n    };\n  },\n\n  mounted() {\n    console.log('thumb mounted', this.imageType);\n    this.$store.commit('onQuizTrue');\n    this.$store.commit('fixedScrollTrue');\n    this.autoClick();\n  },\n\n  beforeUnmount() {\n    this.$store.commit('onQuizFalse');\n    this.$store.commit('fixedScrollFalse');\n  },\n\n  computed: {\n    user() {\n      return this.$store.state.signup.djangoUser;\n    },\n\n    width() {\n      if (this.minContainerWidth == 800) {\n        return 800;\n      } else {\n        return 400;\n      }\n    },\n\n    height() {\n      if (this.minContainerHeight == 800) {\n        return 800;\n      } else {\n        return 400;\n      }\n    }\n\n  },\n  methods: {\n    async getImage(event) {\n      console.log('event', event);\n      this.selectedFile = URL.createObjectURL(event.target.files[0]);\n      this.image = event.target.files[0];\n      await console.log(this.image, 'img', this.selectedFile);\n      this.imageCropper(this.imageType);\n    },\n\n    async imageCropper(type) {\n      this.cropper = new Cropper(this.$refs.image, {\n        zoomable: true,\n        scalable: false,\n        zoomOnTouch: true,\n        aspectRatio: 1,\n        dragMode: 'move',\n        minContainerHeight: this.height,\n        minContainerWidth: this.width,\n\n        crop(event) {\n          console.log(event.detail.x);\n          console.log(event.detail.y);\n          console.log(event.detail.width);\n          console.log(event.detail.height);\n          console.log(event.detail.rotate);\n          console.log(event.detail.scaleX);\n          console.log(event.detail.scaleY);\n\n          if (type == 'thumbnail') {\n            const cropperBorder = document.getElementsByClassName(\"cropper-view-box\", \"cropper-face\");\n            cropperBorder[0].style.borderRadius = '50vh';\n          }\n        }\n\n      });\n    },\n\n    chancel() {\n      this.selectedFile = null;\n      this.showThumbnailFalse();\n    },\n\n    autoClick() {\n      document.getElementById(\"fileUpload\").click();\n      this.inputFile = document.getElementById(\"fileUpload\");\n      document.body.onfocus = this.getEvent;\n    },\n\n    getEvent() {\n      setTimeout(() => {\n        if (this.inputFile.value.length) {} else {\n          this.showThumbnailFalse();\n        }\n\n        document.body.onfocus = null;\n      }, 500);\n    },\n\n    openFileOnClick() {\n      document.getElementById(\"fileUpload\").value = \"\";\n      document.getElementById(\"fileUpload\").files.length = 0;\n      document.getElementById(\"fileUpload\").click();\n\n      if (document.getElementById(\"fileUpload\").files.length >= 1) {//Do something \n      } else {\n        this.showThumbnailFalse(); //Cancel button has been called.\n      }\n    },\n\n    // getCroppedURL(){\n    //     console.log('croppedURL')\n    //     document.getElementById('crop-btn').addEventListener('click', function () {\n    //     resultImgUrl = this.cropper.getCroppedCanvas().toDataURL();\n    //     var result = document.getElementById('result-img');\n    //     result.src = resultImgUrl;\n    //      });\n    // },\n    async userUpdate() {\n      console.log('clicked');\n\n      if (this.imageType == 'thumbnail') {\n        try {\n          const canvas = this.cropper.getCroppedCanvas({\n            width: 500,\n            height: 500,\n            minCropBoxHeight: 300,\n            minCropBoxWidth: 300,\n            maxWidth: 4096,\n            maxHeight: 4096,\n            // fillColor: '#fff',\n            imageSmoothingEnabled: false,\n            imageSmoothingQuality: 'high'\n          });\n          await canvas.toBlob(async blob => {\n            const formData = new FormData();\n            formData.append('thumbnail', blob, `${this.image}.png`), // console.log('getthumb',formData.get('thumbnail'),this.image,blob),\n            axios.patch(`/api/user/${this.getDjangouser.UID}`, formData);\n          }, 'image/png');\n          this.showThumbnailFalse();\n          this.$store.commit('setIsLoading', true);\n          setTimeout(this.reload, 1000);\n        } catch (e) {\n          this.showThumbnailFalse();\n          console.log('fale', e);\n        } // this.$router.go({path: this.$router.currentRoute.path, force: true})\n\n      } else {\n        console.log('else');\n\n        try {\n          const canvas = this.cropper.getCroppedCanvas({\n            width: 1000,\n            height: 1000,\n            minCropBoxHeight: 300,\n            minCropBoxWidth: 300,\n            maxWidth: 4096,\n            maxHeight: 4096,\n            // fillColor: '#fff',\n            imageSmoothingEnabled: false,\n            imageSmoothingQuality: 'high'\n          });\n          canvas.toBlob(async blob => {\n            this.setImageBlob(blob);\n          }, 'image/png');\n        } catch (e) {\n          this.showThumbnailFalse();\n          console.log('fale', e);\n        }\n      }\n    },\n\n    setImageBlob(blob) {\n      this.blob = blob;\n      let url = URL.createObjectURL(blob);\n      this.$emit('setImageBlob', blob, url);\n      this.showThumbnailFalse();\n    },\n\n    showThumbnailFalse() {\n      this.$emit('showThumbnailFalse');\n    },\n\n    reload() {\n      // this.$store.commit('setIsLoading', false)\n      location.reload();\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","Cropper","props","data","file","image","selectedFile","compoHandle","cropper","destination","inputFile","blob","cropperBorder","mounted","console","log","imageType","$store","commit","autoClick","beforeUnmount","computed","user","state","signup","djangoUser","width","minContainerWidth","height","minContainerHeight","methods","getImage","event","URL","createObjectURL","target","files","imageCropper","type","$refs","zoomable","scalable","zoomOnTouch","aspectRatio","dragMode","crop","detail","x","y","rotate","scaleX","scaleY","document","getElementsByClassName","style","borderRadius","chancel","showThumbnailFalse","getElementById","click","body","onfocus","getEvent","setTimeout","value","length","openFileOnClick","userUpdate","canvas","getCroppedCanvas","minCropBoxHeight","minCropBoxWidth","maxWidth","maxHeight","imageSmoothingEnabled","imageSmoothingQuality","toBlob","formData","FormData","append","patch","getDjangouser","UID","reload","e","setImageBlob","url","$emit","location"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue"],"sourcesContent":["<template>\n    <div class='thumbnail-wrapper l-wrapper'>\n        <form @submit.prevent='userUpdate'>\n            <input id=\"fileUpload\" type=\"file\" @change='getImage' hidden enctype=\"multipart/form-data\">\n            <div class=\"cropper-outer-wrapper\" v-if=\"selectedFile\">\n                <div class='cropperinner-wrapper'>\n                    <img ref='image' :src=\"selectedFile\" style=\"width: 300px; height: 300px;\">\n                </div>\n                <div class=\"thumbnail-button-container\">\n                    <button class='btn-base-white-db-sq thumbnail-save-button'>save</button>\n                    <button class='btn-tr-white-base-sq thumbnail-cancel-button' v-if='selectedFile' @click='chancel'>cancel</button>\n                </div>\n            </div>\n        </form>\n        <div>\n            <!-- <div>\n                <img id=\"image\" src=\"@/assets/logo.png\">\n            </div> -->\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport Cropper from 'cropperjs';\nexport default {\n    // set imageType in parent components to check what to do here\n    // if imageTyoe == 'thumbnail' => axios\n    // els if imageType == 'quizQuestion' => return blob\n    props:[\n        \"getDjangouser\",\n        \"minContainerWidth\",\n        \"minContainerHeight\",\n        \"imageType\",\n    ],\n    data(){\n        return{\n            file:'',\n            image:'',\n            selectedFile:null,\n            compoHandle: false,\n            cropper:{},\n            destination:{},\n            inputFile:'',\n            blob:'',\n            cropperBorder:''\n        }\n    },\n    mounted(){\n        console.log('thumb mounted',this.imageType)\n        this.$store.commit('onQuizTrue')\n        this.$store.commit('fixedScrollTrue')\n        this.autoClick()\n    },\n    beforeUnmount(){\n        this.$store.commit('onQuizFalse')\n        this.$store.commit('fixedScrollFalse')\n    },\n    computed:{\n        user(){\n            return this.$store.state.signup.djangoUser\n        },\n        width(){\n            if(this.minContainerWidth == 800){\n                return 800\n            }else{\n                return 400\n            }\n        },\n        height(){\n            if(this.minContainerHeight == 800){\n                return 800\n            }else{\n                return 400\n            }\n        }\n    },\n    methods:{\n        async getImage(event){\n            console.log('event',event)\n            this.selectedFile = URL.createObjectURL(event.target.files[0])\n            this.image = event.target.files[0]\n            await console.log(this.image,'img',this.selectedFile)\n            this.imageCropper(this.imageType)\n        },\n        async imageCropper(type){\n            this.cropper = new Cropper(this.$refs.image, {\n            zoomable: true,\n            scalable: false,\n            zoomOnTouch: true,\n            aspectRatio: 1,\n            dragMode: 'move',\n            minContainerHeight:this.height,\n            minContainerWidth:this.width,\n            crop(event) {\n                    console.log(event.detail.x);\n                    console.log(event.detail.y);\n                    console.log(event.detail.width);\n                    console.log(event.detail.height);\n                    console.log(event.detail.rotate);\n                    console.log(event.detail.scaleX);\n                    console.log(event.detail.scaleY);\n                    if(type == 'thumbnail'){\n                        const cropperBorder = document.getElementsByClassName(\"cropper-view-box\",\"cropper-face\")\n                        cropperBorder[0].style.borderRadius = '50vh'\n                    }\n                },\n            })\n        },\n        chancel(){\n            this.selectedFile=null\n            this.showThumbnailFalse()\n        },\n        autoClick(){\n            document.getElementById(\"fileUpload\").click()\n            this.inputFile = document.getElementById(\"fileUpload\");\n            document.body.onfocus = this.getEvent\n        },\n        getEvent(){\n            setTimeout(() => {\n                if (this.inputFile.value.length) {\n                \n                } else {\n                this.showThumbnailFalse()\n                }\n                document.body.onfocus = null;\n            }, 500);\n        },\n        openFileOnClick(){\n            document.getElementById(\"fileUpload\").value = \"\";\n            document.getElementById(\"fileUpload\").files.length = 0;            \n            document.getElementById(\"fileUpload\").click();\n            if(document.getElementById(\"fileUpload\").files.length >= 1){\n                //Do something \n            }\n            else{\n                this.showThumbnailFalse()\n                //Cancel button has been called.\n            }\n        },\n        // getCroppedURL(){\n        //     console.log('croppedURL')\n        //     document.getElementById('crop-btn').addEventListener('click', function () {\n        //     resultImgUrl = this.cropper.getCroppedCanvas().toDataURL();\n        //     var result = document.getElementById('result-img');\n        //     result.src = resultImgUrl;\n        //      });\n        // },\n        async userUpdate(){\n            console.log('clicked')\n            if(this.imageType == 'thumbnail') {\n                try{\n                    const canvas = this.cropper.getCroppedCanvas({\n                    width: 500,\n                    height: 500,\n                    minCropBoxHeight: 300,\n                    minCropBoxWidth: 300,\n                    maxWidth: 4096,\n                    maxHeight: 4096,\n                    // fillColor: '#fff',\n                    imageSmoothingEnabled: false,\n                    imageSmoothingQuality: 'high',\n                    });\n                await canvas.toBlob(async (blob) => {\n                    const formData = new FormData();\n                    formData.append('thumbnail',blob, `${this.image}.png`),\n                    // console.log('getthumb',formData.get('thumbnail'),this.image,blob),\n                    axios.patch(`/api/user/${this.getDjangouser.UID}`,\n                        formData\n                    )\n                }, 'image/png')\n                this.showThumbnailFalse()\n                this.$store.commit('setIsLoading', true)\n                setTimeout(this.reload,1000)\n                }\n                catch(e){\n                    this.showThumbnailFalse()\n                    console.log('fale',e)\n                }\n                // this.$router.go({path: this.$router.currentRoute.path, force: true})\n            } else {\n                console.log('else')\n                try{\n                    const canvas = this.cropper.getCroppedCanvas({\n                    width: 1000,\n                    height: 1000,\n                    minCropBoxHeight: 300,\n                    minCropBoxWidth: 300,\n                    maxWidth: 4096,\n                    maxHeight: 4096,\n                    // fillColor: '#fff',\n                    imageSmoothingEnabled: false,\n                    imageSmoothingQuality: 'high',\n                    });\n                canvas.toBlob(async (blob) => {\n                    this.setImageBlob(blob)\n                    },'image/png')\n                }\n                catch(e){\n                    this.showThumbnailFalse()\n                    console.log('fale',e)\n                }\n            }\n        },\n        setImageBlob(blob){\n            this.blob = blob\n            let url = URL.createObjectURL(blob)\n            this.$emit('setImageBlob',blob, url)\n            this.showThumbnailFalse()\n        },\n        showThumbnailFalse(){\n            this.$emit('showThumbnailFalse')\n        },\n        reload(){\n            // this.$store.commit('setIsLoading', false)\n            location.reload()\n        }\n    }\n}\n</script>\n\n<style  lang=\"scss\">\n// not scoped for cropper\n@import \"style/_variables.scss\";\n\n.thumbnail-wrapper{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    /* background: ; */\n    overflow:scroll;  \n}\n.cropper-view-box,\n    .cropper-face {\n      cursor: grab;\n      outline: initial;\n    }\n    .cropper-face:active {\n      cursor: grabbing;\n    }\n.thumbnail-button-container{\n    display: flex;\n    justify-content: center;\n    margin-top: 1rem;\n    .thumbnail-save-button{\n        display: flex;\n        justify-content: center;\n        font-size: 1.2rem;\n        margin-right: 0.5rem;\n        min-width: 5rem;\n        min-height: 2rem;\n        font-weight: bold;\n    }\n    .thumbnail-cancel-button{\n        display: flex;\n        justify-content: center;\n        font-size: 1.2rem;\n        margin-left: 0.5rem;\n        min-width: 5rem;\n        min-height: 2rem;\n        font-weight: bold;\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}