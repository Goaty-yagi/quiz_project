{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Bar = _resolveComponent(\"Bar\", true);\n\n  return _openBlock(), _createBlock(_component_Bar, {\n    \"chart-options\": $data.chartOptions,\n    \"chart-data\": $data.chartData,\n    \"chart-id\": $props.chartId,\n    \"dataset-id-key\": $props.datasetIdKey,\n    plugins: $props.plugins,\n    \"css-classes\": $props.cssClasses,\n    styles: $props.styles,\n    width: $props.width,\n    height: $props.height\n  }, null, 8\n  /* PROPS */\n  , [\"chart-options\", \"chart-data\", \"chart-id\", \"dataset-id-key\", \"plugins\", \"css-classes\", \"styles\", \"width\", \"height\"]);\n}","map":{"version":3,"mappings":";;;;uBAEQA,aAUEC,cAVF,EAUE;IATG,iBAAeC,kBASlB;IARG,cAAYA,eAQf;IAPG,YAAUC,cAOb;IANG,kBAAgBA,mBAMnB;IALGC,OAAO,EAAED,cAKZ;IAJG,eAAaA,iBAIhB;IAHGE,MAAM,EAAEF,aAGX;IAFGG,KAAK,EAAEH,YAEV;IADGI,MAAM,EAAEJ;EACX,CAVF;;EAAA","names":["_createBlock","_component_Bar","$data","$props","plugins","styles","width","height"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/charts/Bar.vue"],"sourcesContent":["<template>\n    \n        <Bar\n            :chart-options=\"chartOptions\"\n            :chart-data=\"chartData\"\n            :chart-id=\"chartId\"\n            :dataset-id-key=\"datasetIdKey\"\n            :plugins=\"plugins\"\n            :css-classes=\"cssClasses\"\n            :styles=\"styles\"\n            :width=\"width\"\n            :height=\"height\"\n        />\n    \n</template>\n\n<script>\nimport { Bar } from 'vue-chartjs'\nimport Chart from 'chart.js/auto';\nimport { \n    Chart as \n    ChartJS, \n    Title, \n    Tooltip, \n    Legend, \n    BarElement, \n    CategoryScale, \n    LinearScale } from 'chart.js'\n\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, ChartDataLabels)\n\nexport default {\n  name: 'BarChart',\n  components: { Bar },\n  props: {\n    chartId: {\n      type: String,\n      default: 'bar-chart'\n    },\n    datasetIdKey: {\n      type: String,\n      default: 'label'\n    },\n    width: {\n      type: Number,\n      default: 400\n    },\n    height: {\n      type: Number,\n      default: 400\n    },\n    cssClasses: {\n      default: '',\n      type: String\n    },\n    styles: {\n      type: Object,\n      default: () => {}\n    },\n    plugins: {\n      type: Object,\n      default: () => {}\n    }\n  },\n    data() {\n        Chart.defaults.color = '#fff'\n        Chart.defaults.plugins.title.display = false\n        return {\n            index:'',\n            chartData: {\n                labels: [ 'ひらがな', 'カタカナ', 'ボキャブラリー', 'すうじ' ],\n                datasets: [{ \n                    label: \"超初級正解率\",\n                    data: [10, 9, 8.3, 7]}]},\n            //         borderWidth:1,\n            //         //   fill: true,\n            //         //   borderDash: [9],\n            //         //   borderDashOffset: 0.9,\n            //         //   clip: 'object',\n            //         //   order:1,\n            //         //   tension:1,\n            //         //   spanGaps: true,\n            //         //   borderJoinStyle: 'bevel',\n            //         //   pointRotation:90,\n            //         backgroundColor: 'rgba(255, 153, 51, 0.2)',\n            //         borderColor: ' #ff9933',\n            //         pointBackgroundColor: 'rgb(255, 99, 132)',\n            //         pointBorderColor: '#fff',\n            //         pointHoverBackgroundColor: '#fff',\n            //         pointHoverBorderColor: 'red'\n            //     }],\n            // },\n            chartOptions: {\n                responsive: true,\n                // onClick(e) {\n                //     console.log('this',this)\n                //     const activePoints = this.getElementsAtEventForMode(e, 'nearest', {\n                //         intersect: true\n                //     }, false)\n                //     if (activePoints.length) {\n                //         this.index = activePoints[0].index;\n                //         console.log(this.index,this);\n                //         return this.index\n                //     }\n                // }\n                // maintainAspectRatio: true,\n                // plugins: {\n                //     datalabels: {\n                //         display: false\n                //     },\n                //     legend: { display: false\n                //     },\n                // },\n                // scales:{\n                //     r:{\n                //         beginAtZero: true,\n                //         min:0,\n                //         max:10,\n                //         grid: {\n                //             color: \"gray\",\n                //         },\n                //         angleLines: {\n                //             color: 'white',\n                //         },\n                //         ticks: {\n                //             maxTicksLimit: 3,\n                //             display: false\n                //         },\n                //     }\n                // },        \n            }\n        }\n    },\n    mounted(){\n        //  var ctx = document.getElementById( 'bar-chart' );\n        // Chart.defaults.plugins.title.display = false\n        // Chart.defaults.plugins = false\n        \n        // Chart.defaults.font.size = 16\n            // let a = document.getElementsByTagName('canvas')\n        console.log('bar-mounted',Chart.instances )\n        this.onClick()\n        // ctx.addEventListener( 'click', function( evt ){\n            // Chart.destroy()\n            // console.log('evt', Chart.toString(0)     \n\n\n    },\n    // watch:{\n    //     chartOptions:{\n    //         onClick:{\n    //             handler(v){\n    //         console.log('v',v)\n    //         this.barChartDetail(v)}\n    //         }\n    //     },\n    //     index2:{\n    //         function(v){\n    //             console.log('vv',v)\n    //         }\n    //     }\n    // },\n    // computed:{\n    //     index2(){\n    //         return this.chartOptions.onClick()\n    //     }\n    // },\n    methods:{\n        barChartDetail(index){\n            console.log('going')\n            this.$emit('barChartDetail',index)\n        },\n        onClick(e){\n            // for(let i of Chart.instances){\n            //     i.getElementsAtEventForMode(e, 'nearest', {\n            //     intersect: true\n            // }, false)\n            // break\n            // }\n            let a = Chart.instances\n            console.log('a',a[0])\n            const activePoints = Chart.instances.getElementsAtEventForMode(e, 'nearest', {\n                intersect: true\n            }, false)\n            if (activePoints.length) {\n                this.index = activePoints[0].index;\n                console.log('in',this.index);\n            }\n        }\n        // onClick(e) {\n        //     const activePoints = this.getElementsAtEventForMode(e, 'nearest', {\n        //         intersect: true\n        //     }, false)\n        //     if (activePoints.length) {\n        //         this.index = activePoints[0].index;\n        //         console.log('in',this.index);\n        //     }\n        // }\n    }\n}\n</script>\n<style scoped lang=\"scss\">\n// canvas{\n//     padding: 20rem;\n// }\n// .chart-container{\n    \n// }\n\n</style>"]},"metadata":{},"sourceType":"module"}