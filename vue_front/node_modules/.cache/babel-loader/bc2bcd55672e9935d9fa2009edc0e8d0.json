{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport { createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-ccf2aa12\"), n = n(), _popScopeId(), n;\n};\n\nvar _hoisted_1 = {\n  class: \"main-wrapper\"\n};\n\nvar _hoisted_2 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"div\", {\n    class: \"lds-dual-ring\"\n  }, null, -1\n  /* HOISTED */\n  );\n});\n\nvar _hoisted_3 = [_hoisted_2];\nvar _hoisted_4 = {\n  key: 0\n};\n\nvar _hoisted_5 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"p\", {\n    class: \"quiz-description title-white\"\n  }, \"テスト問題\", -1\n  /* HOISTED */\n  );\n});\n\nvar _hoisted_6 = {\n  key: 0,\n  class: \"finishTest\"\n};\nvar _hoisted_7 = {\n  class: \"quiz-countainer\"\n};\nvar _hoisted_8 = {\n  class: \"question-wrapper\"\n};\nvar _hoisted_9 = {\n  class: \"question-header\"\n};\n\nvar _hoisted_10 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"i\", {\n    class: \"q\"\n  }, \"Q\", -1\n  /* HOISTED */\n  );\n});\n\nvar _hoisted_11 = {\n  class: \"question-body\"\n};\nvar _hoisted_12 = {\n  key: 0,\n  class: \"image-container\"\n};\nvar _hoisted_13 = [\"src\"];\nvar _hoisted_14 = {\n  class: \"answer-wrapper\"\n};\nvar _hoisted_15 = [\"onClick\", \"disabled\"];\nvar _hoisted_16 = {\n  class: \"answer-select-bases\"\n};\nvar _hoisted_17 = {\n  class: \"answer-select\"\n};\nvar _hoisted_18 = {\n  class: \"selecter\"\n};\nvar _hoisted_19 = {\n  class: \"answer-label-bases\"\n};\nvar _hoisted_20 = {\n  class: \"answer-label\"\n};\nvar _hoisted_21 = {\n  class: \"selected-answer-bases\"\n};\nvar _hoisted_22 = {\n  key: 0,\n  class: \"selected-answer-order\"\n};\nvar _hoisted_23 = {\n  class: \"result-answer-order\"\n};\nvar _hoisted_24 = {\n  key: 0,\n  class: \"order\"\n};\nvar _hoisted_25 = {\n  key: 1\n};\n\nvar _hoisted_26 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"i\", {\n    class: \"fas fa-check\"\n  }, null, -1\n  /* HOISTED */\n  );\n});\n\nvar _hoisted_27 = [_hoisted_26];\nvar _hoisted_28 = {\n  key: 1,\n  class: \"fas fa-check\"\n};\nvar _hoisted_29 = {\n  key: 2,\n  class: \"far fa-circle\"\n};\nvar _hoisted_30 = {\n  key: 3,\n  class: \"fas fa-times\"\n};\nvar _hoisted_31 = {\n  key: 1,\n  class: \"button-quiz-container\"\n};\nvar _hoisted_32 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_TestResult = _resolveComponent(\"TestResult\");\n\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"quiz-wrapper\", {\n      'laoding-center': _ctx.$store.state.isLoading\n    }])\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"is-loading-bar has-text-centered\", {\n      'is-loading': _ctx.$store.state.isLoading\n    }])\n  }, _hoisted_3, 2\n  /* CLASS */\n  ), $data.finishTest == false && _ctx.$store.state.isLoading == false ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_hoisted_5, $data.finishTest ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, \"\\\"finishTest is TRUE\\\"\" + _toDisplayString($data.finishTest), 1\n  /* TEXT */\n  )) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.questions.slice($data.pagination.a, $data.pagination.b), function (question, questionindex) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"question-loop\",\n      key: questionindex\n    }, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_hoisted_10, _createTextVNode(\"第\" + _toDisplayString($data.questionLengthForHTML) + \"問\", 1\n    /* TEXT */\n    )]), _createElementVNode(\"div\", _hoisted_11, _toDisplayString($options.getQuestionStatus(question.label, question.status[0])) + _toDisplayString(question.quiz_level), 1\n    /* TEXT */\n    )]), _createCommentVNode(\" <div :class='showPic(question.image)'> \"), question.image ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createElementVNode(\"img\", {\n      class: \"image\",\n      src: question.get_image\n    }, null, 8\n    /* PROPS */\n    , _hoisted_13)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" answer part \"), _createCommentVNode(\" questiontype 3 is '選択'\\n                        ４ is '並び替え'\\n                        5 is '多答' \"), _createElementVNode(\"div\", _hoisted_14, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(question.answer, function (answer, answerindex) {\n      return _openBlock(), _createElementBlock(\"button\", {\n        class: _normalizeClass([\"answer-loop\", {\n          'selected-answer': $data.selectedIndexNum == answerindex || answerindex + 1 in $data.selectedOrderAnswer,\n          'is-correct-answer': $data.resultHandleDict.isCorrect && answer.is_correct || $data.resultHandleDict.answerAllTrueType4 || $data.resultHandleDict.answerIDType4[answer.answer_id],\n          'isnot-correct-answer': $data.resultHandleDict.isNotCorrect && $data.resultHandleDict.answerIDType3 == answer.id || $data.resultHandleDict.answerIDType5[answer.id] == false || $data.resultHandleDict.answerIDType4[answer.answer_id] == false\n        }]),\n        onClick: function onClick(e) {\n          return $data.result == false && $options.onClick(answerindex, answer, question);\n        },\n        disabled: $data.maxSelectReach && answer.id in $data.selectedAnswer == false,\n        key: answerindex\n      }, [_createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, _toDisplayString(String.fromCharCode(answerindex + 65)), 1\n      /* TEXT */\n      )])]), _createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, _toDisplayString(answer.label), 1\n      /* TEXT */\n      )]), _createElementVNode(\"div\", _hoisted_21, [$data.selectedOrderAnswer[answerindex + 1] && question.question_type == 4 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, _toDisplayString($data.selectedOrderAnswer[answerindex + 1]), 1\n      /* TEXT */\n      )) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_23, [$data.resultHandleDict.questionType4 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, _toDisplayString(answer.answer_id), 1\n      /* TEXT */\n      )) : _createCommentVNode(\"v-if\", true), $options.type3And5CheckResult($data.resultHandleDict.answerIDType5, $data.resultHandleDict.answerIDType3, answer.id) && question.question_type != 4 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, _hoisted_27)) : _createCommentVNode(\"v-if\", true)]), $data.selectedOrderAnswer[answerindex + 1] && question.question_type == 5 ? (_openBlock(), _createElementBlock(\"i\", _hoisted_28)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" for result \"), _createCommentVNode(\" <i v-if=\\\"answer.id in resultHandleDict.answerIDType5&&question.question_type==5\\\" class=\\\"fas fa-check\\\"></i> \"), $data.resultHandleDict.isCorrect && answer.is_correct || $data.resultHandleDict.answerAllTrueType4 || $data.resultHandleDict.answerIDType4[answer.answer_id] ? (_openBlock(), _createElementBlock(\"i\", _hoisted_29)) : _createCommentVNode(\"v-if\", true), $data.resultHandleDict.isNotCorrect && $data.resultHandleDict.answerIDType3 == answer.id || $data.resultHandleDict.answerIDType5[answer.id] == false || $data.resultHandleDict.answerIDType4[answer.answer_id] == false ? (_openBlock(), _createElementBlock(\"i\", _hoisted_30)) : _createCommentVNode(\"v-if\", true)])], 10\n      /* CLASS, PROPS */\n      , _hoisted_15);\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]), $data.showNextOrFinishButton && $data.result == false ? (_openBlock(), _createElementBlock(\"div\", _hoisted_31, [_createCommentVNode(\" <div v-if=\\\"questions.length==questionLengthCounter\\\"\\n                            @click=\\\"Finish(question.question_type)\\\" class=\\\"btn-tr-white-base-sq\\\">FINSH</div> \"), _createElementVNode(\"div\", {\n      onClick: function onClick($event) {\n        return $options.nextQuestion(question.question_type, question.id);\n      },\n      class: \"btn-tr-white-base-sq\"\n    }, \" NEXT ＞ \", 8\n    /* PROPS */\n    , _hoisted_32)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])])) : _createCommentVNode(\"v-if\", true), $data.finishTest ? (_openBlock(), _createBlock(_component_TestResult, {\n    key: 1,\n    finalResult: $data.finalResult,\n    startGradeAndLevel: $data.startGradeAndLevel,\n    gradeList: $data.gradeList\n  }, null, 8\n  /* PROPS */\n  , [\"finalResult\", \"startGradeAndLevel\", \"gradeList\"])) : _createCommentVNode(\"v-if\", true)])], 2\n  /* CLASS */\n  );\n}","map":{"version":3,"mappings":"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","names":["class","_createElementVNode","_hoisted_2","_hoisted_26","_createElementBlock","_ctx","state","isLoading","$data","_hoisted_4","_hoisted_5","_toDisplayString","_Fragment","_renderList","slice","a","b","question","questionindex","key","_hoisted_10","$options","label","status","quiz_level","_createCommentVNode","image","src","get_image","answer","answerindex","isCorrect","is_correct","answerAllTrueType4","answerIDType4","answer_id","isNotCorrect","answerIDType3","id","answerIDType5","onClick","disabled","String","fromCharCode","question_type","questionType4","_hoisted_25","_hoisted_27","_hoisted_32","_createBlock","_component_TestResult","finalResult","startGradeAndLevel","gradeList"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/views/quiz/QuizTest.vue"],"sourcesContent":["<template>\n    <div class=\"quiz-wrapper\" :class=\"{'laoding-center':$store.state.isLoading}\">\n        <div class=\"main-wrapper\">\n            <div class=\"is-loading-bar has-text-centered\" v-bind:class=\"{'is-loading': $store.state.isLoading }\">\n                <div class=\"lds-dual-ring\"></div>\n            </div>\n            <div v-if=\"finishTest==false&&$store.state.isLoading==false\">\n                <p class=\"quiz-description title-white\">テスト問題</p>\n                <div v-if=\"finishTest\" class=\"finishTest\">\"finishTest is TRUE\"{{ finishTest }}</div>\n                <div class='quiz-countainer'>\n                    <div\n                    class=\"question-loop\"\n                    v-for=\"(question,questionindex) in questions.slice(pagination.a,pagination.b)\"\n                    v-bind:key=\"questionindex\">\n                        <div class='question-wrapper'>\n                            <div class=\"question-header\"><i class='q'>Q</i>第{{ questionLengthForHTML }}問</div>\n                            <div class='question-body'>{{ getQuestionStatus(question.label,question.status[0]) }}{{ question.quiz_level }}</div>\n                        </div>\n                        \n                        <!-- <div :class='showPic(question.image)'> -->\n                        <div class=\"image-container\" v-if=\"question.image\">\n                            <img class=\"image\" v-bind:src=\"question.get_image\"/>\n                        </div>\n\n                        <!-- answer part -->\n                        <!-- questiontype 3 is '選択'\n                        ４ is '並び替え'\n                        5 is '多答' -->\n                        <div class='answer-wrapper'>\n                            <button \n                            class=\"answer-loop\"\n                            :class=\"{'selected-answer':selectedIndexNum==answerindex||\n                            answerindex+1 in selectedOrderAnswer,\n                            'is-correct-answer':resultHandleDict.isCorrect&&answer.is_correct||\n                            resultHandleDict.answerAllTrueType4||\n                            resultHandleDict.answerIDType4[answer.answer_id],\n                            'isnot-correct-answer':resultHandleDict.isNotCorrect&&resultHandleDict.answerIDType3==answer.id||\n                            resultHandleDict.answerIDType5[answer.id]==false||\n                            resultHandleDict.answerIDType4[answer.answer_id]==false}\"\n                            @click=\"e => result==false && onClick(answerindex,answer,question)\"\n                            :disabled=\"maxSelectReach&&answer.id in selectedAnswer==false\"\n                            v-for=\"(answer,answerindex) in question.answer\"\n                            v-bind:key=\"answerindex\">\n                                <div class='answer-select-bases'>\n                                    <div class=\"answer-select\">\n                                        <div class=\"selecter\">{{ String.fromCharCode(answerindex+65) }}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"answer-label-bases\">\n                                    <div class=\"answer-label\">\n                                        {{ answer.label }}\n                                    </div>\n                                </div>\n                                <div class=\"selected-answer-bases\">\n                                    <div v-if=\"selectedOrderAnswer[answerindex+1]&&question.question_type==4\" class=\"selected-answer-order\">\n                                        {{ selectedOrderAnswer[answerindex+1] }}\n                                    </div>\n                                    <div class=\"result-answer-order\">\n                                        <div class=\"order\" v-if=\"resultHandleDict.questionType4\">\n                                            {{ answer.answer_id}}\n                                        </div>\n                                        <div v-if=\"type3And5CheckResult(resultHandleDict.answerIDType5,resultHandleDict.answerIDType3,answer.id)&&question.question_type!=4\">\n                                            <i class=\"fas fa-check\"></i>\n                                        </div>\n                                    </div>\n                                    <i v-if=\"selectedOrderAnswer[answerindex+1]&&question.question_type==5\" class=\"fas fa-check\"></i>\n                                    <!-- for result -->\n                                    <!-- <i v-if=\"answer.id in resultHandleDict.answerIDType5&&question.question_type==5\" class=\"fas fa-check\"></i> -->\n                                    <i v-if=\"resultHandleDict.isCorrect&&answer.is_correct||\n                                    resultHandleDict.answerAllTrueType4||\n                                    resultHandleDict.answerIDType4[answer.answer_id]\" class=\"far fa-circle\"></i>\n                                    <i v-if=\"resultHandleDict.isNotCorrect&&resultHandleDict.answerIDType3==answer.id||\n                                    resultHandleDict.answerIDType5[answer.id]==false||\n                                    resultHandleDict.answerIDType4[answer.answer_id]==false\" class=\"fas fa-times\"></i>\n                                </div>\n                            </button>\n                        </div>\n                        <div v-if=\"showNextOrFinishButton&&\n                        result==false\" class=\"button-quiz-container\">\n                            <!-- <div v-if=\"questions.length==questionLengthCounter\"\n                            @click=\"Finish(question.question_type)\" class=\"btn-tr-white-base-sq\">FINSH</div> -->\n                            <div\n                            @click=\"nextQuestion(question.question_type,question.id)\" class=\"btn-tr-white-base-sq\">\n                                NEXT ＞\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <TestResult\n            v-if=\"finishTest\"\n            :finalResult=\"finalResult\"\n            :startGradeAndLevel=\"startGradeAndLevel\"\n            :gradeList=\"gradeList\"\n            />\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport {mapGetters,mapActions} from 'vuex'\nimport Result from '@/components/quiz_components/Result.vue'\nimport TestResult from '@/components/initial/TestResult.vue'\nimport { createHydrationRenderer } from '@vue/runtime-core'\n\nexport default {\n    components: {\n    Result,\n    TestResult\n  },  \n    data(){\n        return{\n            questionLengthForHTML:1,\n            questionLengthCounter:1,\n            SelectedAnswerInfo:{},\n            selectedAnswer: {},\n            answerIDAndOrder:{},\n            showResult: false,\n            showNextOrFinishButton:false,\n            result: false,\n            countupDict:{\n                answerID:'',\n                questionID:'',\n                questionType:''\n            },\n            pagination:{\n                a: 0,\n                b: 1,\n            },\n            resultHandleDict:{\n                isCorrect: false,\n                IsNotCorrect: false,\n                answerIDType3: '',\n                questionType4: false,\n                answerAllTrueType4: false,\n                answerIDType4: '',\n                answerIDType5: '',\n            },\n            \n            maxSelectReach: false,\n            // currentQuestionType:{\n            //     select: false,\n            //     manySelect: false,\n            //     order: false\n            // },\n            selectedIndexNum: null,\n            showSelectNum: true,\n            selectedOrderAnswer:{},\n            selectAnswerCounter:0,\n            NumOfIscorrect:0,\n            // here for status attribute\n            userStatusDict:{\n                status:'',\n                isCorrect:0,\n                isFalse:0\n            },\n            // from here for test attributes\n            quizTestInfo:{\n                level:'',\n                quizId:4\n            },\n            LevelCounters:{\n                handleLevelUp:0,\n                handleLevelDown:0\n            },\n            finalResult:{\n                grade:'',\n                level:''\n            },\n            finishTest:false,\n            currentLevel:1,\n            currentGrade:\"\",\n            correctAnswer:{},\n            startGradeAndLevel:{\n                grade:'',\n                level:''\n            },\n            tempStatusDict:{\n                'status':[],\n                'grade':'',\n                'level':''\n            },\n            setQuizAndLevel:{\n                'quizId':'',\n                'level':''\n            },\n            gradeList:[\n                '超初級',\n                '初級',\n                '中級',\n                '上級'\n            ]\n        }\n    },\n    created(){\n        console.log(\"created\")\n        this.$store.dispatch('setQuizIdAndlevelAction')\n        // this.getquiz()\n        this.getTestQuestions()\n    },\n    mounted(){\n        this.startGradeAndLevel.grade = this.quizTakerObject.grade\n        this.startGradeAndLevel.level = this.quizTakerObject.level\n        this.quizTestInfo.quizId = this.quizTakerObject.grade\n        this.currentGrade = this.quizTakerObject.grade\n        console.log('mounted',this.quizTestInfo.quizId,this.currentGrade)\n        this.currentLevel = this.quizTakerObject.level\n        this.$store.commit('onQuizTrue')\n        this.SelectedAnswerInfo = {}\n    },\n    beforeUnmount(){\n        this.$store.commit('onQuizFalse')\n    },\n    computed: mapGetters(['questions','quiz', 'quizTakerObject', 'gradeForConvert']),\n    methods:{\n        ...mapActions(['getTestQuestions']),\n        nextQuestion(questionType,questionID){\n            this.handleCountUpDict(this.selectedAnswer,questionType,questionID)\n            this.pagination.a += 1\n            this.pagination.b += 1\n            this.selectedIndexNum= null\n            this.showNextOrFinishButton = false\n            this.selectAnswerHandler(\n                questionType,\n                )\n            this.setTempStatusDict()\n            this.questionLengthCounter += 1\n            this.questionLengthForHTML += 1\n            this.checkConsecutiveResult()\n            this.NumOfIscorrect = 0\n            this.maxSelectReach = false\n            this.selectedOrderAnswer = {}\n            this.selectedAnswer = {}\n            this.answerIDAndOrder = {}\n            this.selectAnswerCounter = 0\n            console.log(\"CCC\",this.SelectedAnswerInfo,'current',this.currentLevel)\n            this.scrollTop()\n        },\n        onClick(answerindex, answer, question){\n            // this is for 2 things,\n            // first is for controling CSS return selectedIndexNum\n            // which used for questionType 3, and selectedOrderAnswer\n            // which used for questionType 4 and 5.\n            // second is for selected-answer and is_correct.\n            // return selectedAnswer for questionType 3.\n            // for questionType 4, use getAnswerIDAndOrder function.\n            // for questionType 5, use getIDAndIsCorrect function.\n            if(question.question_type == 3){\n                if(this.selectedIndexNum==answerindex){\n                    this.selectedIndexNum = null\n                    this.selectedAnswer = {}\n                    this.showNextOrFinishButton = false\n                }else{\n                    this.selectedIndexNum = answerindex\n                    this.selectedAnswer['answerID'] = answer.id\n                    this.selectedAnswer['isCorrect'] = answer.is_correct\n                    this.handleShowNextOrFinishButton()\n                }\n            }else if(question.question_type == 4){\n                console.log(\"in No4 DELETE\")\n                if(this.selectedOrderAnswer[answerindex+1]){\n                    this.selectedOrderAnswer = \n                    this.changeOrder(this.selectedOrderAnswer,answerindex+1)\n                    this.getAnswerIDAndOrder(answer.answer_id,this.selectAnswerCounter)\n                    this.selectAnswerCounter -= 1\n                    this.showNextOrFinishButton = false\n                    \n                }else{\n                    console.log(\"in No4 ADD\")\n                    this.selectAnswerCounter += 1\n                    this.selectedOrderAnswer[answerindex+1] = this.selectAnswerCounter\n                    this.getAnswerIDAndOrder(answer.answer_id,this.selectAnswerCounter)\n                    console.log(\"Onclick-No4\",Object.keys(this.selectedOrderAnswer).length, question.length)\n                    if(Object.keys(this.selectedOrderAnswer).length == question.answer.length){\n                    this.handleShowNextOrFinishButton()\n                    }\n                }\n            }else if(question.question_type == 5){\n                console.log(\"on click_type5 question\",question)\n                this.getNumOfIscorrect(question.answer)\n                if(this.selectedOrderAnswer[answerindex+1]){\n                    this.selectedOrderAnswer = \n                    this.changeOrder(this.selectedOrderAnswer,answerindex+1)\n                    // console.log('SOA',this.selectedOrderAnswer)\n                    this.getIDAndIsCorrect(answer.id, answer.is_correct)\n                    this.selectAnswerCounter -= 1\n                    if(question.max_select){\n                        if(Object.keys(this.selectedOrderAnswer).length < question.max_select){\n                            this.showNextOrFinishButton = false\n                            this.maxSelectReach = false\n                        }\n                    }else if(Object.keys(this.selectedOrderAnswer).length == 0){\n                        this.showNextOrFinishButton = false\n                    }\n                }else{\n                    this.selectAnswerCounter += 1\n                    this.selectedOrderAnswer[answerindex+1] = this.selectAnswerCounter\n                    this.getIDAndIsCorrect(answer.id, answer.is_correct)\n                    if(question.max_select){\n                        if(Object.keys(this.selectedOrderAnswer).length == question.max_select){\n                            this.handleShowNextOrFinishButton()\n                            this.maxSelectReach = true\n                        }\n                    }else{\n                        this.handleShowNextOrFinishButton()\n                    }\n                }\n            }\n        },\n        changeOrder(dict, index){\n            // if deleted, the num or nums before the deleted items order num\n            // change\n            let orderNum = dict[index]\n            delete dict[index]\n            if(dict){\n                let changeDict = {}\n                Object.keys(dict).forEach(key =>{\n                    if(dict[key] > orderNum){\n                        dict[key] -= 1\n                    }\n                })\n            }\n        return dict\n        },\n        selectAnswerHandler(questionType){\n            // this is get informations about selected-answer for result component\n            // return SelectedAnswerInfo\n            if(questionType == 3){\n                this.SelectedAnswerInfo[this.questionLengthCounter] = {}\n                this.SelectedAnswerInfo[this.questionLengthCounter]['questionType'] = questionType\n                this.SelectedAnswerInfo[this.questionLengthCounter]['isCorrect'] = this.selectedAnswer.isCorrect\n                this.handleUserStatus(this.selectedAnswer.isCorrect)\n                this.SelectedAnswerInfo[this.questionLengthCounter]['answerID'] = this.selectedAnswer.answerID\n            }\n            else if(questionType == 4){\n                this.SelectedAnswerInfo[this.questionLengthCounter] = {}\n                this.SelectedAnswerInfo[this.questionLengthCounter]['questionType'] = questionType\n                let stringKeys = Object.keys(this.answerIDAndOrder[this.questionLengthCounter]).map(function(a){\n                    return Number(a)\n                })\n                if(JSON.stringify(stringKeys) == JSON.stringify(Object.values(this.answerIDAndOrder[this.questionLengthCounter]))){\n                    this.SelectedAnswerInfo[this.questionLengthCounter]['isCorrect'] = true\n                    this.handleUserStatus(true)\n                }else{\n                    this.SelectedAnswerInfo[this.questionLengthCounter]['isCorrect'] = false\n                    this.handleUserStatus(false)\n                }\n                this.makeOrderBoolean()\n                this.SelectedAnswerInfo[this.questionLengthCounter]['orderAnswer'] = this.answerIDAndOrder\n            }else if(questionType == 5){\n                this.SelectedAnswerInfo[this.questionLengthCounter] = {}\n                this.SelectedAnswerInfo[this.questionLengthCounter]['questionType'] = questionType\n                let isCorrectCounter = 0\n                var type5IsCorrect = true\n                Object.values(this.selectedAnswer).forEach(value =>{\n                    if(value == false){\n                        this.SelectedAnswerInfo[this.questionLengthCounter]['isCorrect'] = false\n                        this.handleUserStatus(false)\n                        type5IsCorrect = false\n                    }else{\n                        isCorrectCounter += 1\n                    }\n                })\n                console.log('SAH',this.NumOfIscorrect, isCorrectCounter)\n                if(this.NumOfIscorrect == isCorrectCounter&&\n                type5IsCorrect){\n                    this.SelectedAnswerInfo[this.questionLengthCounter]['isCorrect'] = true\n                    this.handleUserStatus(true)\n                }else if(type5IsCorrect==false&&\n                isCorrectCounter > 0){\n                    this.SelectedAnswerInfo[this.questionLengthCounter]['isCorrect'] = null\n                    this.handleUserStatus(false)\n                }\n                // else if(this.maxSelectReach){\n                //     this.SelectedAnswerInfo[this.questionLengthCounter]['isCorrect'] = null\n                // }\n                this.SelectedAnswerInfo[this.questionLengthCounter]['selectedAnswer'] = this.selectedAnswer\n            }\n        },\n        getAnswerIDAndOrder(answerID,orderNum){\n            // this is for collecting answer from questionType 4\n            console.log(\"GAID\")\n            if(this.questionLengthCounter in this.answerIDAndOrder){\n                console.log(\"first-IF TRUE\",this.questionLengthCounter, this.answerIDAndOrder)\n                console.log(\"sono2daze\",orderNum, this.answerIDAndOrder[this.questionLengthCounter])\n                if(orderNum in this.answerIDAndOrder[this.questionLengthCounter]){\n                    this.answerIDAndOrder[this.questionLengthCounter] =\n                    this.changeOrder(this.answerIDAndOrder[this.questionLengthCounter],orderNum)\n                }else{\n                    this.answerIDAndOrder[this.questionLengthCounter][orderNum] = answerID   \n                }\n            }else{\n                this.answerIDAndOrder[this.questionLengthCounter] = {}\n                this.answerIDAndOrder[this.questionLengthCounter][orderNum] = answerID\n            }   \n        },\n        makeOrderBoolean(){\n            // this is for AnswerIDAndOrder{1:1} to be {1:true}\n            let newDict = {}\n            let IntegerKeys = Object.keys(this.answerIDAndOrder[this.questionLengthCounter]).map(function(a){\n                    return Number(a)\n                })\n            for(let i = 0; i < IntegerKeys.length; i++){\n                if(IntegerKeys[i] == Object.values(this.answerIDAndOrder[this.questionLengthCounter])[i]){\n                    newDict[i+1] = true\n                }else{\n                    newDict[i+1] = false\n                }\n            }\n            this.answerIDAndOrder = newDict\n            // stringKeys.forEach(num =>{\n            //     Object.values(this.answerIDAndOrder[this.questionLengthCounter]).forEach(value =>{\n            //         if(num == )\n            //     })\n            // })\n        },\n        getIDAndIsCorrect(id, isCorrect){\n            // this is for questionType 5 \n            if(id in this.selectedAnswer){\n                delete this.selectedAnswer[id]\n                console.log(id,\"deleted\",this.selectedAnswer)\n            }else{\n                this.selectedAnswer[id] = isCorrect\n                console.log(id,\"added\",this.selectedAnswer)\n            }\n        },\n        getNumOfIscorrect(answers){\n            // this is for questionType 5\n            console.log('inGNOI',this.NumOfIscorrect,answers)\n            if(this.NumOfIscorrect==false){\n                console.log('Gp')\n                 Object.values(answers).forEach(value =>{\n                    if(value.is_correct){\n                        this.NumOfIscorrect += 1\n                    }\n                })\n            }\n        },\n        handleShowNextOrFinishButton(){\n            this.showNextOrFinishButton = true\n        },\n        resultAnswerHandler(){\n            if(this.result){\n                this.resultHandleDict.isCorrect = false\n                this.resultHandleDict.isNotCorrect = false\n                this.resultHandleDict.answerAllTrueType4 = false\n                this.resultHandleDict.questionType4 = false\n                this.resultHandleDict.answerIDType3 = ''\n                this.resultHandleDict.answerIDType4 = ''\n                this.resultHandleDict.answerIDType5 = ''\n                Object.keys(this.SelectedAnswerInfo).forEach(key =>{\n                    if(key==this.questionLengthCounter){\n                        console.log(\"currentType\",this.SelectedAnswerInfo[key].questionType,this.SelectedAnswerInfo[key].isCorrect)\n                        if(this.SelectedAnswerInfo[key].isCorrect){\n                            if(this.SelectedAnswerInfo[key].questionType==4){\n                                this.resultHandleDict.answerAllTrueType4 = true\n                            }else if(this.SelectedAnswerInfo[key].questionType==5){\n                                this.resultHandleDict.answerIDType5 = this.SelectedAnswerInfo[key].selectedAnswer\n                            }\n                            this.resultHandleDict.isCorrect = true\n                        }else if(this.SelectedAnswerInfo[key].isCorrect==false&&\n                            this.SelectedAnswerInfo[key].questionType==3){\n                                this.resultHandleDict.isCorrect = true\n                                this.resultHandleDict.isNotCorrect = true\n                                this.resultHandleDict.answerIDType3 = this.SelectedAnswerInfo[key].answerID\n                        }else if(this.SelectedAnswerInfo[key].questionType==5){\n                            console.log(\"in type5\")\n                                this.resultHandleDict.isCorrect = true\n                                this.resultHandleDict.isNotCorrect = true\n                                this.resultHandleDict.answerIDType5 = this.SelectedAnswerInfo[key].selectedAnswer\n                                console.log(\"type5\",this.resultHandleDict.answerIDType5)\n                        }else if(this.SelectedAnswerInfo[key].isCorrect==false&&\n                            this.SelectedAnswerInfo[key].questionType==4){\n                                this.resultHandleDict.questionType4 = true\n                                this.resultHandleDict.isCorrect = true\n                                this.resultHandleDict.isNotCorrect = true\n                                this.resultHandleDict.answerIDType4 = this.SelectedAnswerInfo[key].orderAnswer\n                        }\n                    }\n                })      \n            }\n        },\n        type3And5CheckResult(selectedAnswer5,selectedAnswer3, answerID){\n            // console.log(selectedAnswer, answerID)\n            if(this.result){\n                console.log(\"type\",this.SelectedAnswerInfo[this.questionLengthCounter].questionType,\"5\",selectedAnswer5, \"3\",selectedAnswer3,answerID,this.questionLengthCounter)\n                if(this.SelectedAnswerInfo[this.questionLengthCounter].questionType==5){\n                    console.log(\"go\")\n                    if(answerID in selectedAnswer5){\n                        return true\n                    }else{\n                        return false\n                    }\n                }\n                else if(this.SelectedAnswerInfo[this.questionLengthCounter].questionType==3){\n                    if(answerID == selectedAnswer3){\n                        return true\n                    }else{\n                        return false\n                    }\n                }\n            }\n        },\n        handlePagination(a,b){\n            // this is for result component\n            console.log(\"HP\",a,b)\n            this.pagination.a = a\n            this.pagination.b = b\n            this.questionLengthCounter = b\n        },\n        handleCountUpDict(selectedAnswer,questionType,questionID){\n            this.countupDict.questionType = questionType\n            this.countupDict.questionID = questionID\n            if(questionType == 5){\n                this.countupDict.answerID = Object.keys(selectedAnswer)\n            }else if(questionType == 3){\n                Object.keys(selectedAnswer).forEach(key => {\n                    if(key = \"answerID\"){\n                        this.countupDict.answerID = selectedAnswer[key]\n                    }\n                })\n            }\n            this.$store.dispatch('countUpAnswerAndQuestion',this.countupDict)\n        },\n        HandleShowResult(){\n            this.showResult = !this.showResult          \n        },\n        handleResult(){\n            this.result = ! this.result\n        },\n        handleUserStatus(selectedAnswer){\n            // this is for only is_true and is_false\n            console.log(selectedAnswer)\n            this.userStatusDict.isCorrect = 0\n            this.userStatusDict.isFalse = 0\n            if(selectedAnswer){\n                this.userStatusDict.isCorrect = 1\n            }else{\n                this.userStatusDict.isFalse = 1\n            }\n            this.$store.dispatch('userStatusPost',this.userStatusDict)\n            console.log('HUS',this.userStatusDict)\n            \n        },\n        getQuestionStatus(lavel,status){\n            this.userStatusDict.status = status\n            return lavel\n        },\n        resultNext(){\n            this.pagination.a += 1 \n            this.pagination.b += 1\n            this.questionLengthCounter += 1\n            this.resultAnswerHandler()\n            this.scrollTop()\n        },\n        resultBack(){\n            this.pagination.a -= 1 \n            this.pagination.b -= 1\n            this.questionLengthCounter -= 1\n            this.resultAnswerHandler()\n            this.scrollTop()\n        },\n        scrollTop(){\n            window.scrollTo({\n            top: 0,\n            behavior: \"smooth\"\n            });\n        },\n        setTempStatusDict(){\n            console.log('IN-setSD',this.tempStatusDict,this.userStatusDict)\n            const _ = require('lodash');\n            let copyObject = _.cloneDeep(this.userStatusDict)\n            if(!this.tempStatusDict.status[0]){\n                this.tempStatusDict.status.push(copyObject)\n                console.log('pushed')\n            }\n            else{\n                for(let i in this.tempStatusDict.status){\n                    console.log('loop',i,typeof(i),this.tempStatusDict.status[i].status,copyObject.status)\n                    if(this.tempStatusDict.status[i].status==copyObject.status){\n                        console.log('true',this.tempStatusDict)\n                        if(copyObject.isCorrect){\n                            console.log('correct')\n                            this.tempStatusDict.status[i].isCorrect+=1\n                            console.log('correct',this.tempStatusDict)\n                            break\n                        }else{\n                            console.log('notcorrect')\n                            this.tempStatusDict.status[i].isFalse+=1\n                            console.log('notcorrect',this.tempStatusDict)\n                            break\n                        }\n                    }\n                    else{\n                        console.log('false',i,this.tempStatusDict.status.length -1)\n                        if(Number(i) == this.tempStatusDict.status.length -1){\n                            this.tempStatusDict.status.push(copyObject)\n                            console.log('pushed2',this.tempStatusDict.status)\n                        }\n                    }\n                }\n            }\n        },\n        \n        // from here for test function\n        quizTestInfoHandler(){\n            console.log('in-QTIH',typeof(this.currentLevel),this.currentLevel,this.quizTestInfo.grade)\n            if(this.currentLevel >= 11) {\n                console.log('over 11')\n                this.currentLevel = 1;\n                console.log('CL',this.currentLevel)\n                for(let [index,i] of this.gradeList.entries()){\n                    console.log('i',i,'index',index)\n                    this.$store.commit('convertGradeFromIntToID',i)\n                    console.log(this.gradeForConvert,this.currentGrade)\n                    if(this.gradeForConvert == this.currentGrade) {\n                        this.$store.commit('convertGradeFromIntToID',this.gradeList[index +1])\n                        this.quizTestInfo.quizId = this.gradeForConvert\n                        this.currentGrade = this.gradeForConvert\n                        console.log(\"info\",this.quizTestInfo)\n                        break\n                    }\n                }\n            }\n            else if(this.currentLevel == 0){\n                this.currentLevel = 10;\n                for(let [index,i] of this.gradeList.entries()){\n                    this.$store.commit('convertGradeFromIntToID',i)\n                    console.log(this.gradeForConvert,this.currentGrade)\n                    if(this.gradeForConvert == this.currentGrade) {\n                        this.$store.commit('convertGradeFromIntToID',this.gradeList[index -1])\n                        this.quizTestInfo.quizId = this.gradeForConvert \n                        this.currentGrade = this.gradeForConvert\n                        break\n                    }\n                }\n            }\n            console.log(\"do nothing\")\n        },\n        checkConsecutiveResult(){\n            var correctCounter = 0\n        \n            console.log('SS',this.SelectedAnswerInfo)\n            if(Object.keys(this.SelectedAnswerInfo).length >= 4){\n                if(Object.keys(this.SelectedAnswerInfo).length == 10){\n                    let isTrue = 0\n                    let isFalse = 0\n                    for (let i = 1; i <= 10; i++){\n                        if(this.SelectedAnswerInfo[i].isCorrect){\n                            isTrue += 1\n                        }else{\n                            isFalse += 1\n                        }\n                    }\n                    console.log(\"isT\",isTrue)\n                    console.log(\"isF\",isFalse)\n                    if(isTrue >= 7){\n                        this.LevelCounters.handleLevelUp += 1\n                        this.currentLevel += 1\n                        this.quizTestInfoHandler()\n                        if(this.LevelCounters.handleLevelUp+this.LevelCounters.handleLevelDown == 3){\n                            this.finishTest = true\n                            this.getFinalResult()\n                            this.LevelCounters.handleLevelUp = 0\n                            this.LevelCounters.handleLevelDown = 0\n                        }\n                        else{\n                            this.quizTestInfo.level = this.currentLevel\n                            this.$store.commit('getTestQuizInfo',this.quizTestInfo)\n                            this.getTestQuestions()\n                            this.pagination.a = 0\n                            this.pagination.b = 1\n                            this.SelectedAnswerInfo = {}\n                            correctCounter = 0\n                            this.questionLengthCounter = 1\n                        }\n                    }\n                    else if(isTrue > 4 && isTrue < 7){\n                        this.finishTest = true\n                        this.getFinalResult()\n                        this.LevelCounters.handleLevelUp = 0\n                        this.LevelCounters.handleLevelDown = 0\n                    }\n                    else{\n                        console.log(\"IT\",isTrue)\n                        this.LevelCounters.handleLevelDown += 1\n                        this.$store.commit('convertGradeFromIntToID',this.gradeList[0])\n                        console.log('CG',this.currentGrade,'CON',this.gradeForConvert,'CL',this.currentLevel)\n                        console.log(this.currentGrade !=this.gradeForConvert&&this.currentLevel!=1)\n                        console.log(this.currentGrade !=this.gradeForConvert,this.currentLevel!=1)\n                        if(this.currentGrade !=this.gradeForConvert){\n                            console.log(\"dpwn start\")\n                            this.currentLevel -= 1\n                            this.quizTestInfoHandler()\n                            if(this.LevelCounters.handleLevelUp+this.LevelCounters.handleLevelDown == 3){\n                                this.finishTest = true\n                                this.getFinalResult()\n                                this.LevelCounters.handleLevelUp = 0\n                                this.LevelCounters.handleLevelDown = 0\n                            }\n                            else{\n                                this.quizTestInfo.level = this.currentLevel\n                                this.$store.commit('getTestQuizInfo',this.quizTestInfo)\n                                this.getTestQuestions()\n                                correctCounter = 0\n                                this.pagination.a = 0\n                                this.pagination.b = 1\n                                this.questionLengthCounter = 1\n                                this.SelectedAnswerInfo = {}\n                            }\n                        }\n                        else{\n                            console.log('no more low level')\n                        }\n                    }\n                    if(this.LevelCounters.handleLevelUp+this.LevelCounters.handleLevelDown == 3){\n                        this.finishTest = true\n                        this.getFinalResult()\n                        this.LevelCounters.handleLevelUp = 0\n                        this.LevelCounters.handleLevelDown = 0\n                    }\n                }else{\n                    console.log(\"longer than 4\")\n                    let num4 = 0\n                    num4 = Object.keys(this.SelectedAnswerInfo).length - 4\n                    // check correct answer 4 times in a row\n                    for (let i = 1; i <= 4; i++){\n                        console.log(\"forloop\",this.SelectedAnswerInfo)\n                        if(this.SelectedAnswerInfo[i + num4].isCorrect){\n                            correctCounter += 1\n                        }\n                    }\n                    if(correctCounter == 4){\n                        console.log(\"correct4\",this.LevelCounters.handleLevelUp,this.LevelCounters.handleLevelDown)\n                        this.LevelCounters.handleLevelUp += 1\n                        if(this.LevelCounters.handleLevelUp>=3&&this.LevelCounters.handleLevelDown==0){\n                            this.finishTest = true\n                            this.getFinalResult()\n                            this.LevelCounters.handleLevelUp = 0\n                        }else if(this.LevelCounters.handleLevelUp+this.LevelCounters.handleLevelDown==3){\n                            console.log(\"quiz done\", this.LevelCounters.handleLevelUp+this.LevelCounters.handleLevelDown)\n                            this.finishTest = true\n                            this.getFinalResult()\n                            this.LevelCounters.handleLevelUp = 0\n                            this.LevelCounters.handleLevelDown = 0\n                        }else{\n                            console.log('UP')\n                            this.currentLevel += 1\n                            this.quizTestInfoHandler()\n                            this.quizTestInfo.level = this.currentLevel\n                            this.$store.commit('getTestQuizInfo',this.quizTestInfo)\n                            this.getTestQuestions()\n                            this.pagination.a = 0\n                            this.pagination.b = 1\n                            this.SelectedAnswerInfo = {}\n                            correctCounter = 0\n                            this.questionLengthCounter = 1\n                        }                \n                    }else if(correctCounter == 0){\n                        console.log(\"zeroCA\")\n                        this.$store.commit('convertGradeFromIntToID',this.gradeList[0])\n                        if(this.currentLevel==1&&this.currentGrade==this.gradeForConvert){\n                            console.log(\"no more low level\")\n                            this.finishTest = true\n                            this.getFinalResult()\n                            this.LevelCounters.handleLevelUp = 0\n                            this.LevelCounters.handleLevelDown = 0\n                        }\n                        else{\n                            this.LevelCounters.handleLevelDown += 1\n                            console.log(\"in down-part\",this.LevelCounters.handleLevelUp,this.LevelCounters.handleLevelDown)\n                            if(this.LevelCounters.handleLevelDown>=3&&this.LevelCounters.handleLevelUp==0){\n                                this.finishTest = true\n                                this.getFinalResult()\n                                this.LevelCounters.handleLevelDown = 0\n                            }\n                            else if(this.LevelCounters.handleLevelUp+this.LevelCounters.handleLevelDown==3){\n                                this.finishTest = true\n                                this.getFinalResult()\n                                this.LevelCounters.handleLevelUp = 0\n                                this.LevelCounters.handleLevelDown = 0\n                            }else{\n                                console.log('down',this.currentLevel)\n                                this.currentLevel -= 1\n                                this.quizTestInfoHandler()\n                                this.quizTestInfo.level = this.currentLevel\n                                this.$store.commit('getTestQuizInfo',this.quizTestInfo)\n                                this.getTestQuestions()\n                                correctCounter = 0\n                                this.pagination.a = 0\n                                this.pagination.b = 1\n                                this.questionLengthCounter = 1\n                                this.SelectedAnswerInfo = {}\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        async updateQuizTaker(){\n            console.log('UQT',\n            this.$store.state.signup.djangoUser.quiz_taker)\n            this.$store.commit(\"convertGradeFromIntToID\",this.finalResult.grade)\n            await axios.patch(`api/quiz-taker-test/?quiz_taker=${this.$store.getters.quizTaker}&grade=${this.currentGrade}&level=${this.finalResult.level}`)\n        },\n        getFinalResult(){\n            console.log(\"GFR\",this.currentGrade)\n            this.$store.commit('convertGradeFromIDToInt',this.currentGrade)\n            this.finalResult.grade = this.gradeForConvert\n            console.log('final_grade',this.gradeForConvert)\n            this.finalResult.level = this.currentLevel\n            this.tempStatusDict.level = this.currentLevel\n            this.$store.dispatch('convertGradeFromIntToIDForNewUser',this.currentGrade)\n            this.tempStatusDict.grade = this.$store.getters.gradeForConvert\n            this.tempStatusDict.grade = this.$store.state.quiz.gradeForConvert\n            if(!this.tempStatusDict.grade){\n                // 4 is 超初級. it might be chainge\n                this.tempStatusDict.grade = 4\n            }\n            // this.$store.commit('setTempUser',this.tempStatusDict)\n            // this.$store.commit('tempUserTestTrue')\n            this.updateQuizTaker()\n            this.$store.commit('convertGradeFromIDToInt',this.startGradeAndLevel.grade)\n            console.log('int',this.gradeForConvert)\n        }\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"style/_variables.scss\";\n\n.quiz-wrapper{\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    margin-top: 0.5rem;\n    padding-bottom: 2rem;\n    // align-items: center;\n    .quiz-countainer{\n        width: 100%;\n        display: flex;\n        // align-items: center;\n        justify-content: center;\n        .question-loop{\n            width: 100%;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            .question-wrapper{\n            width: 95%;\n            border: solid  rgba(243, 91, 36, 0.808);\n            border-radius: 1rem;\n            overflow:hidden;\n                .question-header{\n                background: linear-gradient($base-lite,$base-color);\n                color:white;\n                padding:0.5rem;\n                font-weight:bold;\n                position:relative;\n                }\n                .question-body{\n                    background-color: rgb(253, 245, 239);\n                    padding:1rem;\n                    font-weight:bold;\n                }\n                .q{\n                position:absolute;\n                left:5%;\n                bottom:2%;\n                font-size:1.5rem;  \n                }\n            }\n            .image-container{\n                display: flex;\n                justify-content: center;\n                width: 100%;\n                .image{\n                    width: 40%;\n                }\n            }\n            .answer-wrapper{\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                margin-top: 1rem;\n                .is-correct-answer{\n                    background: rgb(148, 255, 235);\n                }\n                .answer-loop:hover{\n                    border: solid $base-color;\n                    // background: $base-lite-3;\n                    .answer-select{\n                        background: $base-lite-2;\n                    }\n                }\n                .answer-loop{\n                    width: 95%;\n                    height: 3rem;\n                    border: solid black;\n                    border-radius: 0.5rem;\n                    background: white;\n                    display: flex;\n                    align-items: center;\n                    margin-bottom: 0.5rem;\n                    transition:0.3s;\n                    .answer-select-bases{\n                        flex-basis: 15%;\n                        .answer-select{\n                            border: solid black;\n                            border-radius: 50vh;\n                            width: 2.5rem;\n                            height: 2.5rem;\n                            margin-left: 0.5rem;\n                            display: flex;\n                            align-items: center;\n                            justify-content: center;\n                            transition:0.3s;\n                            .selecter{\n                                font-weight: bold;\n                                font-size: 1.5rem;\n                            }\n                        }\n                    }\n                    .answer-label-bases{\n                        flex-basis: 70%;\n                        .answer-label{\n\n                        }\n                    }\n                    .selected-answer-bases{\n                        flex-basis: 15%;\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                        .selected-answer-order{\n                            font-size: 1.5rem;\n                            font-weight: bold;\n                            color: gray;\n                            flex-basis: 50%;\n                        }\n                        .result-answer-order{\n                            flex-basis: 50%;\n                            .order{\n                                font-size: 1.5rem;\n                                font-weight: bold;\n                                color: gray;\n                                margin-right: 0.5rem;\n                            }\n                        }\n                        .fa-check{\n                            color: gray;\n                            flex-basis: 50%;\n                        }\n                        .fa-circle{\n                            color: rgba(0, 84, 75, 0.839);\n                            font-size: 1.5rem;\n                            flex-basis: 50%;\n                            margin-right: 0.1rem;\n                        }\n                        .fa-times{\n                            color: rgba(244, 10, 10, 0.839);\n                            font-size: 1.5rem;\n                            margin-right: 0.1rem;\n                            flex-basis: 50%;\n                        }\n                    }\n                }\n                .is-correct-answer{\n                    background: rgb(177, 243, 231);\n                }\n                .isnot-correct-answer{\n                    background: rgb(255, 147, 147)\n                }\n                .selected-answer{\n                    background: $base-lite-3;\n                    .answer-select{\n                        background: $base-color;\n                        color: white;\n                    }\n                }\n            }\n            .button-quiz-container{\n                display: flex;\n                margin-top: 1rem;\n                align-items: center;\n                div{\n                    padding-top: 0.2rem;\n                    padding-bottom: 0.2rem;\n                    padding-right: 0.4rem;\n                    padding-left: 0.4rem;\n                }\n            }\n            .buttun-in-result{\n                display: flex;\n                margin-top: 1rem;\n                .btn-base-black-db-ov{\n                    padding-left: 0.5rem;\n                    padding-right: 0.5rem;\n                    padding-top: 0.2rem;\n                    padding-bottom: 0.2rem;\n                    margin-right: 0.5rem;\n                    margin-left: 0.5rem;\n                    font-weight: bold;                    \n                }\n                .btn-tr-white-base-sq{\n                    padding-left: 0.5rem;\n                    padding-right: 0.5rem;\n                    padding-top: 0.2rem;\n                    padding-bottom: 0.2rem;\n                }\n            }\n        }\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}