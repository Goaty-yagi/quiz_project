{"remainingRequest":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/babel-loader/lib/index.js!/Users/ossan/git-clone/quiz_project/vue_front/src/store/modules/quiz.js","dependencies":[{"path":"/Users/ossan/git-clone/quiz_project/vue_front/src/store/modules/quiz.js","mtime":1653629137651},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/babel.config.js","mtime":1643442797713},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/store/modules/quiz.js"],"names":["store","router","axios","getDefaultState","isLoading","quizID","countUpDict","questionID","answerID","questionType","userStatusDict","status","grade","quizTaker","isCorrect","isFalse","currentQuizMode","myQuiz","practice","test","gradeForConvert","numOfQuiz","questionField","level","questions","quiz","quizNameId","fieldNameId","statusNameId","randomURL","notice","step","onQuiz","namespace","state","getters","rootState","signup","djangoUser","quiz_taker","id","quizTakerObject","mutations","getRandomQuestion","array","console","log","k","length","i","answer","r","Math","floor","random","tmp","setQuestions","setTestQuestions","getQuiz","payload","setAnswerAndQuestionID","IDs","getQuizInfo","quizInfo","quizId","fieldId","quizNum","getTestQuizInfo","setQuizId","setQuizNameId","setFieldNameId","setStatusNameId","getUserStatusInfo","setQuizID","setQuizTakerID","convertGradeFromIntToID","name","convertGradeFromIDToInt","onQuizTrue","onQuizFalse","handleCurrentQuizMode","setQuizIdAndlevel","actions","getquestions","commit","root","get","response","data","shift","getQuizNameId","getFieldNameId","getStatusNameId","getTestQuestions","que","countUpAnswerAndQuestion","patch","userStatusPost","method","url","is_correct","is_false","createAndDeleteMyQuiz","my_quiz","question","convertGradeFromIntToIDForNewUser","dispatch","setQuizIdAndlevelAction"],"mappings":"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","sourcesContent":["import store from '..'\nimport {router} from \"@/main.js\"\nimport axios from 'axios'\n\n\nlet getDefaultState = () => {\n    return {\n        isLoading: false,\n        quizID: 1,\n        countUpDict:{\n            questionID: '',\n            answerID: '',\n            questionType:''\n        },\n        userStatusDict:{\n            status:'',\n            grade:'',\n            quizTaker:'',\n            isCorrect:0,\n            isFalse:0\n        },\n        currentQuizMode:{\n            myQuiz: false,\n            practice: false,\n            test: false\n        },\n        gradeForConvert:'',\n        numOfQuiz: 3,\n        questionField: [1,2],\n        level: 1,\n        questions:[],\n        quiz:[],\n        quizNameId:'',\n        fieldNameId:'',\n        statusNameId:'',\n        randomURL:'',\n        test:null,\n        notice:false,\n        step:1,\n        // onQuiz is for footer view \n        onQuiz: false,\n        // myQuestion: ''\n    }\n}\n\nexport default {\n    namespace: true,\n    state: getDefaultState(),\n    getters:{\n        questions:(state) => state.questions,\n        quiz:(state) => state.quiz,\n        quizNameId:(state) => state.quizNameId,\n        fieldNameId:(state) => state.fieldNameId,\n        statusNameId:(state) => state.statusNameId,\n        gradeForConvert:(state) => state.gradeForConvert,\n        currentQuizMode:(state) => state.currentQuizMode,\n        quizTaker(state, getters, rootState){\n            try{\n                return rootState.signup.djangoUser.quiz_taker[0].id\n            }catch{\n                return null\n            }\n        },\n        quizTakerObject(state, getters, rootState){\n            try{\n                return rootState.signup.djangoUser.quiz_taker[0]\n            }catch{\n                return null\n            }\n        },\n        quizID(state, getters, rootState){\n            try{\n                return rootState.signup.djangoUser.quiz_taker[0].grade\n            }catch{\n                return null\n            }\n        },\n        // myQuestion(state, getters, rootState){\n        //     state.myQuestion = rootState.signup.djangoUser.my_quiz[0].my_question\n        //     console.log(\"myquestion\",state.myQuestion)\n        // }\n    },\n    mutations:{\n        getRandomQuestion(state,array){\n            console.log('in randomQ', array)\n            // for (let i = array.length - 1; i >= 0; i--) {\n            //     let r = Math.floor(Math.random() * (i + 1))\n            //     let tmp = array[i]\n            //     array[i] = array[r]\n            //     array[r] = tmp\n            // }\n            for ( let k =0; k < array.length; k++){\n                for (let i = array[k].answer.length - 1; i >= 0; i--) {\n                    let r = Math.floor(Math.random() * (i + 1))\n                    let tmp = array[k].answer[i]\n                    array[k].answer[i] = array[k].answer[r]\n                    array[k].answer[r] = tmp\n                }\n            }\n            return array\n        },\n        setQuestions:(state,questions) => (state.questions = questions),\n        setTestQuestions:(state,questions) => (state.questions = questions),\n        getQuiz(state, payload){\n            state.quiz = payload\n            console.log(state.quiz)\n        },\n        setAnswerAndQuestionID(state,IDs){\n            state.countUpDict.questionID = IDs.questionID\n            state.countUpDict.answerID = IDs.answerID\n            state.countUpDict.questionType = IDs.questionType\n        },\n        getQuizInfo(state, quizInfo){\n            state.questionField = []\n            state.quizID = ''\n            state.numOfQuiz = ''\n            state.quizID = quizInfo.quizId\n            if(quizInfo.fieldId){\n                state.questionField = quizInfo.fieldId\n            }\n            state.numOfQuiz = quizInfo.quizNum\n        },\n        getTestQuizInfo(state, quizInfo){\n            console.log('in',quizInfo)\n            state.quizID = quizInfo.quizId\n            state.level = quizInfo.level\n            console.log('setQ-quiz id and level',state.quizID,state.level)\n        },\n        setQuizId(state){\n        },\n        setQuizNameId(state, payload){\n            state.quizNameId = payload\n        },\n        setFieldNameId(state, payload){\n            state.fieldNameId = payload\n        },\n        setStatusNameId(state, payload){\n            state.statusNameId = payload\n        },\n        getUserStatusInfo(state, payload){\n            state.userStatusDict.status = payload.status\n            // state.userStatusDict.grade = payload.grade\n            // state.userStatusDict.quiz_taker = payload.quiz_taker\n            state.userStatusDict.isCorrect = payload.isCorrect\n            state.userStatusDict.isFalse = payload.isFalse\n            console.log(\"GUSI\",state.userStatusDict)\n        },\n        // getUserStatusInfoForInit(state, payload){\n        //     state.userStatusDict.status = payload.status\n        //     // state.userStatusDict.grade = payload.grade\n        //     // state.userStatusDict.quiz_taker = payload.quiz_taker\n        //     state.userStatusDict.isCorrect = payload.isCorrect\n        //     state.userStatusDict.isFalse = payload.isFalse\n        //     console.log(\"GUSI\",state.userStatusDict)\n        // },\n        setQuizID(state, payload){\n            state.userStatusDict.grade = payload\n            console.log('setQuizID',state.userStatusDict.grade)\n        },\n        setQuizTakerID(state, payload){\n            state.userStatusDict.quizTaker = payload\n        },\n        convertGradeFromIntToID(state, payload){\n            for(let i of state.quizNameId){\n                if(i.name == payload){\n                    state.gradeForConvert = i.id\n                }\n            }\n        },\n        convertGradeFromIDToInt(state, payload){\n            for(let i of state.quizNameId){\n                if(i.id == payload){\n                    state.gradeForConvert = i.name\n                }\n            }\n        },\n        onQuizTrue(state){\n            state.onQuiz = true\n        },\n        onQuizFalse(state){\n            state.onQuiz = false\n        },\n        handleCurrentQuizMode(state,payload){\n            for (let i of state.currentQuizMode){\n                console.log('CQM',i)\n                if(i == payload){\n                    state.currentQuizMode[i] = true\n                }\n            }\n        },\n        setQuizIdAndlevel(state, getters){\n            console.log('GEETERS',getters)\n            state.quizID = getters.grade\n            state.level = getters.level\n            console.log(\"SQIAL\",state.level,state.quizID)\n        }\n    },\n    actions:{\n        async getquestions({ state, commit,getters }){\n            console.log('action2',state.quizID,state.level)\n            state.questions = []\n            state.quiz = []\n            commit('setIsLoading', true, {root:true})\n            if(state.questionField[0]){\n                var response = await axios.get(`/api/quizzes-questions/?quiz=${state.quizID}&num=${state.numOfQuiz}&field=${state.questionField}`)\n            }else{\n                var response = await axios.get(`/api/quizzes-questions/?quiz=${state.quizID}&num=${state.numOfQuiz}`)\n            }\n            console.log(getters.quizTaker)\n            commit('setQuizTakerID',getters.quizTaker)\n            commit('getQuiz',response.data[0])\n            commit('setQuizID',response.data[0].name)\n            response.data.shift()\n            commit('getRandomQuestion',response.data)\n            commit('setQuestions',response.data);\n            commit('setIsLoading', false,{root:true})\n        },\n        async getQuizNameId({ state, commit }){\n            if(state.quizNameId==false){\n                commit('setIsLoading', true, {root:true})\n                let response = await axios.get(\"/api/quizzes-name-id/\")\n                commit('setQuizNameId',response.data)\n                console.log(state.quizNameId)\n                commit('setIsLoading', false,{root:true})\n            }\n        },\n        async getFieldNameId({ state, commit }){\n            if(state.fieldNameId==false){\n                commit('setIsLoading', true, {root:true})\n                let response = await axios.get(\"/api/field-list/\")\n                commit('setFieldNameId',response.data)\n                console.log(state.fieldNameId)\n                commit('setIsLoading', false,{root:true})\n            }\n        },\n        async getStatusNameId({ state, commit }){\n            if(state.statusNameId==false){\n                commit('setIsLoading', true, {root:true})\n                let response = await axios.get(\"/api/status-list/\")\n                commit('setStatusNameId',response.data)\n                commit('setIsLoading', false,{root:true})\n            }\n        },\n        async getTestQuestions({ state, commit, getters }){\n            // need things for non login\n            console.log('getquestioninfo',state.que)\n            if(getters.quizID!=null){\n                // quiz_taker exist\n                console.log('true')\n                commit('setIsLoading', true, {root:true})\n                let response = await axios.get(`/api/quizzes-tests/?quiz=${state.quizID}&level=${state.level}`)\n                commit('getQuiz',response.data[0])\n                commit('setQuizTakerID',getters.quizTaker)\n                commit('setQuizID',response.data[0].name)\n                response.data.shift()\n                commit('getRandomQuestion',response.data)\n                commit('setTestQuestions',response.data);\n                commit('setIsLoading', false,{root:true})\n            }else{\n                // first questions in init\n                commit('setIsLoading', true, {root:true})\n                let response = await axios.get(`/api/quizzes-tests/?quiz=4&level=${state.level}`)\n                commit('getQuiz',response.data[0])\n                response.data.shift()\n                commit('getRandomQuestion',response.data)\n                commit('setTestQuestions',response.data);\n                commit('setIsLoading', false,{root:true})\n            }\n        },\n        async countUpAnswerAndQuestion({ state , commit }, payload){\n            // commit('setIsLoading', true, {root:true})\n            commit('setAnswerAndQuestionID',payload)\n            if(state.countUpDict.questionType!=4){\n                await axios.patch(`/api/answers-count/?answer=${state.countUpDict.answerID}&question=${state.countUpDict.questionID}`)\n            }\n            // commit('setIsLoading', false,{root:true})\n            \n        },\n        async userStatusPost({ state , commit }, payload){\n            console.log(\"userStatusPost\",state.userStatusDict)\n            commit('getUserStatusInfo',payload)\n            await axios({\n                method: 'post',\n                url: '/api/user-status/',\n                data: {\n                    status: state.userStatusDict.status,\n                    grade: state.userStatusDict.grade,\n                    quiz_taker: state.userStatusDict.quizTaker,\n                    is_correct: state.userStatusDict.isCorrect,\n                    is_false: state.userStatusDict.isFalse,\n                }\n            })\n        },\n        async createAndDeleteMyQuiz({ state , commit }, payload){\n            console.log(\"inMY\",payload)\n            await axios({\n                method: 'post',\n                url: '/api/my-question/',\n                data: {\n                    my_quiz: payload.myQuiz,\n                    question: payload.question\n                }\n            })\n        },\n        async convertGradeFromIntToIDForNewUser({ state , dispatch, commit }, payload){\n            if(!state.quizNameId){\n                await dispatch('getQuizNameId')\n            }\n            commit('convertGradeFromIntToID', payload)\n            console.log('done convert')\n        },\n        setQuizIdAndlevelAction({ state , commit, getters }){\n            commit('setQuizIdAndlevel', getters.quizTakerObject)\n            console.log('donene')\n        },\n    }\n}"]}]}