{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers } from \"vue\";\nvar _hoisted_1 = {\n  class: \"thumbnail-wrapper l-wrapper\"\n};\nvar _hoisted_2 = {\n  key: 0,\n  class: \"cropper-outer-wrapper\"\n};\nvar _hoisted_3 = {\n  class: \"cropperinner-wrapper\"\n};\nvar _hoisted_4 = [\"src\"];\nvar _hoisted_5 = {\n  class: \"thumbnail-button-container\"\n};\n\nvar _hoisted_6 = /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"btn-base-white-db-sq thumbnail-save-button\"\n}, \"save\", -1\n/* HOISTED */\n);\n\nvar _hoisted_7 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createCommentVNode(\" <div>\\n                <img id=\\\"image\\\" src=\\\"@/assets/logo.png\\\">\\n            </div> \")], -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers(function () {\n      return $options.userUpdate && $options.userUpdate.apply($options, arguments);\n    }, [\"prevent\"]))\n  }, [_createElementVNode(\"input\", {\n    id: \"fileUpload\",\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = function () {\n      return $options.getImage && $options.getImage.apply($options, arguments);\n    }),\n    hidden: \"\",\n    enctype: \"multipart/form-data\"\n  }, null, 32\n  /* HYDRATE_EVENTS */\n  ), $data.selectedFile ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"img\", {\n    ref: \"image\",\n    src: $data.selectedFile,\n    style: {\n      \"width\": \"300px\",\n      \"height\": \"300px\"\n    }\n  }, null, 8\n  /* PROPS */\n  , _hoisted_4)]), _createElementVNode(\"div\", _hoisted_5, [_hoisted_6, $data.selectedFile ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"btn-tr-white-base-sq thumbnail-cancel-button\",\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.chancel && $options.chancel.apply($options, arguments);\n    })\n  }, \"cancel\")) : _createCommentVNode(\"v-if\", true)])])) : _createCommentVNode(\"v-if\", true)], 32\n  /* HYDRATE_EVENTS */\n  ), _hoisted_7]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;;;;EAGEA,KAAK,EAAC;;;EACFA,KAAK,EAAC;;;;EAGNA,KAAK,EAAC;;;8BACPC,oBAAwE,QAAxE,EAAwE;EAAhED,KAAK,EAAC;AAA0D,CAAxE,EAA2D,MAA3D,EAA+D;AAAA;AAA/D;;8BAKZC,oBAIM,KAJN,EAIM,IAJN,EAIM,cAHFC,gHAGE,CAJN;;AAAA;;;uBAbJC,oBAkBM,KAlBN,cAkBM,CAjBFF,oBAWO,MAXP,EAWO;IAXAG,QAAM;MAAA,OAAUC,qEAAV;IAAA,GAAoB,WAApB;EAWN,CAXP,GACIJ,oBAA2F,OAA3F,EAA2F;IAApFK,EAAE,EAAC,YAAiF;IAApEC,IAAI,EAAC,MAA+D;IAAvDC,QAAM;MAAA,OAAEH,iEAAF;IAAA,EAAiD;IAArCI,MAAM,EAAN,EAAqC;IAA9BC,OAAO,EAAC;EAAsB,CAA3F;;EAAA,GACyCC,oCAAzCR,oBAQM,KARN,cAQM,CAPFF,oBAEM,KAFN,cAEM,CADFA,oBAA0E,KAA1E,EAA0E;IAArEW,GAAG,EAAC,OAAiE;IAAxDC,GAAG,EAAEF,kBAAmD;IAArCG,KAAoC,EAApC;MAAA;MAAA;IAAA;EAAqC,CAA1E;;EAAA,aACE,CAFN,CAOE,EAJFb,oBAGM,KAHN,cAGM,CAFFc,UAEE,EADiEJ,oCAAnER,oBAAiH,QAAjH,EAAiH;UAAA;IAAzGH,KAAK,EAAC,8CAAmG;IAA/BgB,OAAK;MAAA,OAAEX,+DAAF;IAAA;EAA0B,CAAjH,EAAkG,QAAlG,sCACE,CAHN,CAIE,CARN,uCAFJ;;EAAA,CAiBE,EALFY,UAKE,CAlBN","names":["class","_createElementVNode","_createCommentVNode","_createElementBlock","onSubmit","$options","id","type","onChange","hidden","enctype","$data","ref","src","style","_hoisted_6","onClick","_hoisted_7"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue"],"sourcesContent":["<template>\n    <div class='thumbnail-wrapper l-wrapper'>\n        <form @submit.prevent='userUpdate'>\n            <input id=\"fileUpload\" type=\"file\" @change='getImage' hidden enctype=\"multipart/form-data\">\n            <div class=\"cropper-outer-wrapper\" v-if=\"selectedFile\">\n                <div class='cropperinner-wrapper'>\n                    <img ref='image' :src=\"selectedFile\" style=\"width: 300px; height: 300px;\">\n                </div>\n                <div class=\"thumbnail-button-container\">\n                    <button class='btn-base-white-db-sq thumbnail-save-button'>save</button>\n                    <button class='btn-tr-white-base-sq thumbnail-cancel-button' v-if='selectedFile' @click='chancel'>cancel</button>\n                </div>\n            </div>\n        </form>\n        <div>\n            <!-- <div>\n                <img id=\"image\" src=\"@/assets/logo.png\">\n            </div> -->\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport Cropper from 'cropperjs';\nexport default {\n    // set imageType in parent components to check what to do here\n    // if imageTyoe == 'thumbnail' => axios\n    // els if imageType == 'quizQuestion' => return blob\n    props:[\n        \"getDjangouser\",\n        \"minContainerWidth\",\n        \"minContainerHeight\",\n        \"imageType\",\n    ],\n    data(){\n        return{\n            file:'',\n            image:'',\n            selectedFile:null,\n            compoHandle: false,\n            cropper:{},\n            destination:{},\n            inputFile:'',\n            blob:'',\n            cropperBorder:''\n        }\n    },\n    mounted(){\n        console.log('thumb mounted',this.imageType)\n        this.autoClick()\n    },\n    computed:{\n        user(){\n            return this.$store.state.signup.djangoUser\n        },\n        width(){\n            if(this.minContainerWidth == 800){\n                return 800\n            }else{\n                return 400\n            }\n        },\n        height(){\n            if(this.minContainerHeight == 800){\n                return 800\n            }else{\n                return 400\n            }\n        }\n    },\n    methods:{\n        async getImage(event){\n            console.log('event',event)\n            this.selectedFile = URL.createObjectURL(event.target.files[0])\n            this.image = event.target.files[0]\n            await console.log(this.image,'img',this.selectedFile)\n            this.imageCropper(this.imageType)\n        },\n        async imageCropper(type){\n            this.cropper = new Cropper(this.$refs.image, {\n            zoomable: true,\n            scalable: false,\n            zoomOnTouch: true,\n            aspectRatio: 1,\n            dragMode: 'move',\n            minContainerHeight:this.height,\n            minContainerWidth:this.width,\n            crop(event) {\n                    console.log(event.detail.x);\n                    console.log(event.detail.y);\n                    console.log(event.detail.width);\n                    console.log(event.detail.height);\n                    console.log(event.detail.rotate);\n                    console.log(event.detail.scaleX);\n                    console.log(event.detail.scaleY);\n                    if(type == 'thumbnail'){\n                        const cropperBorder = document.getElementsByClassName(\"cropper-view-box\",\"cropper-face\")\n                        cropperBorder[0].style.borderRadius = '50vh'\n                    }\n                },\n            })\n        },\n        chancel(){\n            this.selectedFile=null\n            this.showThumbnailFalse()\n        },\n        autoClick(){\n            document.getElementById(\"fileUpload\").click()\n            this.inputFile = document.getElementById(\"fileUpload\");\n            document.body.onfocus = this.getEvent\n        },\n        getEvent(){\n            setTimeout(() => {\n                if (this.inputFile.value.length) {\n                \n                } else {\n                this.showThumbnailFalse()\n                }\n                document.body.onfocus = null;\n            }, 500);\n        },\n        openFileOnClick(){\n            document.getElementById(\"fileUpload\").value = \"\";\n            document.getElementById(\"fileUpload\").files.length = 0;            \n            document.getElementById(\"fileUpload\").click();\n            if(document.getElementById(\"fileUpload\").files.length >= 1){\n                //Do something \n            }\n            else{\n                this.showThumbnailFalse()\n                //Cancel button has been called.\n            }\n        },\n        // getCroppedURL(){\n        //     console.log('croppedURL')\n        //     document.getElementById('crop-btn').addEventListener('click', function () {\n        //     resultImgUrl = this.cropper.getCroppedCanvas().toDataURL();\n        //     var result = document.getElementById('result-img');\n        //     result.src = resultImgUrl;\n        //      });\n        // },\n        async userUpdate(){\n            console.log('clicked')\n            if(this.imageType == 'thumbnail') {\n                try{\n                    const canvas = this.cropper.getCroppedCanvas({\n                    width: 500,\n                    height: 500,\n                    minCropBoxHeight: 300,\n                    minCropBoxWidth: 300,\n                    maxWidth: 4096,\n                    maxHeight: 4096,\n                    // fillColor: '#fff',\n                    imageSmoothingEnabled: false,\n                    imageSmoothingQuality: 'high',\n                    });\n                await canvas.toBlob(async (blob) => {\n                    const formData = new FormData();\n                    formData.append('thumbnail',blob, `${this.image}.png`),\n                    // console.log('getthumb',formData.get('thumbnail'),this.image,blob),\n                    axios.patch(`/api/user/${this.getDjangouser.UID}`,\n                        formData\n                    )\n                }, 'image/png')\n                this.showThumbnailFalse()\n                this.$store.commit('setIsLoading', true)\n                setTimeout(this.reload,1000)\n                }\n                catch(e){\n                    this.showThumbnailFalse()\n                    console.log('fale',e)\n                }\n                // this.$router.go({path: this.$router.currentRoute.path, force: true})\n            } else {\n                console.log('else')\n                try{\n                    const canvas = this.cropper.getCroppedCanvas({\n                    width: 1000,\n                    height: 1000,\n                    minCropBoxHeight: 300,\n                    minCropBoxWidth: 300,\n                    maxWidth: 4096,\n                    maxHeight: 4096,\n                    // fillColor: '#fff',\n                    imageSmoothingEnabled: false,\n                    imageSmoothingQuality: 'high',\n                    });\n                canvas.toBlob(async (blob) => {\n                    this.setImageBlob(blob)\n                    },'image/png')\n                }\n                catch(e){\n                    this.showThumbnailFalse()\n                    console.log('fale',e)\n                }\n            }\n        },\n        setImageBlob(blob){\n            this.blob = blob\n            let url = URL.createObjectURL(blob)\n            this.$emit('setImageBlob',blob, url)\n            this.showThumbnailFalse()\n        },\n        showThumbnailFalse(){\n            this.$emit('showThumbnailFalse')\n        },\n        reload(){\n            // this.$store.commit('setIsLoading', false)\n            location.reload()\n        }\n    }\n}\n</script>\n\n<style  lang=\"scss\">\n// not scoped for cropper\n@import \"style/_variables.scss\";\n\n.thumbnail-wrapper{\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    /* background: ; */\n    overflow:scroll;  \n}\n.cropper-view-box,\n    .cropper-face {\n      cursor: grab;\n      outline: initial;\n    }\n    .cropper-face:active {\n      cursor: grabbing;\n    }\n.thumbnail-button-container{\n    display: flex;\n    justify-content: center;\n    margin-top: 1rem;\n    .thumbnail-save-button{\n        display: flex;\n        justify-content: center;\n        font-size: 1.2rem;\n        margin-right: 0.5rem;\n        min-width: 5rem;\n        min-height: 2rem;\n        font-weight: bold;\n    }\n    .thumbnail-cancel-button{\n        display: flex;\n        justify-content: center;\n        font-size: 1.2rem;\n        margin-left: 0.5rem;\n        min-width: 5rem;\n        min-height: 2rem;\n        font-weight: bold;\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}