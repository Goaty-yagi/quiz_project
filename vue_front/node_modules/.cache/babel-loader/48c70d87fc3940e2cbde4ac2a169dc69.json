{"ast":null,"code":"import Cropper from 'cropperjs';\nexport default {\n  data() {\n    return {\n      previewFile: '',\n      canvas: ''\n    };\n  },\n\n  props: ['selectedFile'],\n\n  beforeMount() {\n    this.previewFile = this.selectedFile;\n  },\n\n  mounted() {\n    console.log('cropperOpen', this.previewFile);\n    this.imageCropper();\n  },\n\n  methods: {\n    saveImg() {\n      this.canvas = this.cropper.getCroppedCanvas({\n        width: 160,\n        height: 90,\n        minCropBoxHeight: 300,\n        minCropBoxWidth: 300,\n        maxWidth: 4096,\n        maxHeight: 4096,\n        fillColor: '#fff',\n        imageSmoothingEnabled: false,\n        imageSmoothingQuality: 'high'\n      });\n      console.log(this.canvas);\n      this.$emit('getCanvas', this.canvas);\n      this.$emit('handleShowCropper');\n    },\n\n    async imageCropper() {\n      this.cropper = new Cropper(this.$refs.image, {\n        zoomable: false,\n        scalable: false,\n        zoomOnTouch: true,\n        aspectRatio: 1,\n\n        crop(event) {\n          console.log(event.detail.x);\n          console.log(event.detail.y);\n          console.log(event.detail.width);\n          console.log(event.detail.height);\n          console.log(event.detail.rotate);\n          console.log(event.detail.scaleX);\n          console.log(event.detail.scaleY);\n        }\n\n      });\n    },\n\n    chancel() {\n      this.previewFile = null;\n      this.$emit('handleShowCropper');\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAaA,OAAOA,OAAP,MAAoB,WAApB;AACA,eAAe;EAEXC,IAAI,GAAE;IACF,OAAM;MACFC,WAAW,EAAC,EADV;MAEFC,MAAM,EAAC;IAFL,CAAN;EAIH,CAPU;;EAQXC,KAAK,EAAC,CACF,cADE,CARK;;EAWXC,WAAW,GAAE;IACT,KAAKH,WAAL,GAAmB,KAAKI,YAAxB;EACH,CAbU;;EAcXC,OAAO,GAAE;IACLC,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0B,KAAKP,WAA/B;IACA,KAAKQ,YAAL;EACH,CAjBU;;EAkBXC,OAAO,EAAC;IACJC,OAAO,GAAE;MACL,KAAKT,MAAL,GAAc,KAAKU,OAAL,CAAaC,gBAAb,CAA8B;QACxCC,KAAK,EAAE,GADiC;QAExCC,MAAM,EAAE,EAFgC;QAGxCC,gBAAgB,EAAE,GAHsB;QAIxCC,eAAe,EAAE,GAJuB;QAKxCC,QAAQ,EAAE,IAL8B;QAMxCC,SAAS,EAAE,IAN6B;QAOxCC,SAAS,EAAE,MAP6B;QAQxCC,qBAAqB,EAAE,KARiB;QASxCC,qBAAqB,EAAE;MATiB,CAA9B,CAAd;MAWAf,OAAO,CAACC,GAAR,CAAY,KAAKN,MAAjB;MACA,KAAKqB,KAAL,CAAW,WAAX,EAAwB,KAAKrB,MAA7B;MACA,KAAKqB,KAAL,CAAW,mBAAX;IACH,CAhBG;;IAiBJ,MAAMd,YAAN,GAAoB;MAChB,KAAKG,OAAL,GAAe,IAAIb,OAAJ,CAAY,KAAKyB,KAAL,CAAWC,KAAvB,EAA8B;QAC7CC,QAAQ,EAAE,KADmC;QAE7CC,QAAQ,EAAE,KAFmC;QAG7CC,WAAW,EAAE,IAHgC;QAI7CC,WAAW,EAAE,CAJgC;;QAK7CC,IAAI,CAACC,KAAD,EAAQ;UACJxB,OAAO,CAACC,GAAR,CAAYuB,KAAK,CAACC,MAAN,CAAaC,CAAzB;UACA1B,OAAO,CAACC,GAAR,CAAYuB,KAAK,CAACC,MAAN,CAAaE,CAAzB;UACA3B,OAAO,CAACC,GAAR,CAAYuB,KAAK,CAACC,MAAN,CAAalB,KAAzB;UACAP,OAAO,CAACC,GAAR,CAAYuB,KAAK,CAACC,MAAN,CAAajB,MAAzB;UACAR,OAAO,CAACC,GAAR,CAAYuB,KAAK,CAACC,MAAN,CAAaG,MAAzB;UACA5B,OAAO,CAACC,GAAR,CAAYuB,KAAK,CAACC,MAAN,CAAaI,MAAzB;UACA7B,OAAO,CAACC,GAAR,CAAYuB,KAAK,CAACC,MAAN,CAAaK,MAAzB;QACH;;MAbwC,CAA9B,CAAf;IAeH,CAjCG;;IAkCJC,OAAO,GAAE;MACL,KAAKrC,WAAL,GAAiB,IAAjB;MACA,KAAKsB,KAAL,CAAW,mBAAX;IACH;;EArCG;AAlBG,CAAf","names":["Cropper","data","previewFile","canvas","props","beforeMount","selectedFile","mounted","console","log","imageCropper","methods","saveImg","cropper","getCroppedCanvas","width","height","minCropBoxHeight","minCropBoxWidth","maxWidth","maxHeight","fillColor","imageSmoothingEnabled","imageSmoothingQuality","$emit","$refs","image","zoomable","scalable","zoomOnTouch","aspectRatio","crop","event","detail","x","y","rotate","scaleX","scaleY","chancel"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/board/CropperField.vue"],"sourcesContent":["<template>\n    <div class='l-wrapper'>\n        <div class=\"cropper-outer-wrapper\" v-if=\"previewFile\">\n            <div class='cropper-wrapper'>\n                <img ref='image' :src=\"previewFile\">\n                <button class='save-button' v-if='previewFile' @click='chancel'>chancel</button>\n                <button @click=\"saveImg\">save</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Cropper from 'cropperjs';\nexport default {\n    \n    data(){\n        return{\n            previewFile:'',\n            canvas:''\n        }\n    },\n    props:[\n        'selectedFile',\n    ],\n    beforeMount(){\n        this.previewFile = this.selectedFile\n    },\n    mounted(){\n        console.log('cropperOpen',this.previewFile)\n        this.imageCropper()\n    },\n    methods:{\n        saveImg(){\n            this.canvas = this.cropper.getCroppedCanvas({\n                width: 160,\n                height: 90,\n                minCropBoxHeight: 300,\n                minCropBoxWidth: 300,\n                maxWidth: 4096,\n                maxHeight: 4096,\n                fillColor: '#fff',\n                imageSmoothingEnabled: false,\n                imageSmoothingQuality: 'high',\n            });\n            console.log(this.canvas)\n            this.$emit('getCanvas', this.canvas)\n            this.$emit('handleShowCropper')\n        },\n        async imageCropper(){\n            this.cropper = new Cropper(this.$refs.image, {\n            zoomable: false,\n            scalable: false,\n            zoomOnTouch: true,\n            aspectRatio: 1,\n            crop(event) {\n                    console.log(event.detail.x);\n                    console.log(event.detail.y);\n                    console.log(event.detail.width);\n                    console.log(event.detail.height);\n                    console.log(event.detail.rotate);\n                    console.log(event.detail.scaleX);\n                    console.log(event.detail.scaleY);\n                },\n            })\n        },\n        chancel(){\n            this.previewFile=null\n            this.$emit('handleShowCropper')\n        },\n    }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}