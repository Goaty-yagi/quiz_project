{"remainingRequest":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/babel-loader/lib/index.js!/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/ossan/git-clone/quiz_project/vue_front/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue?vue&type=template&id=86beb2ec","dependencies":[{"path":"/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue","mtime":1645151889388},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/babel.config.js","mtime":1643442797713},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHdpdGhNb2RpZmllcnMgYXMgX3dpdGhNb2RpZmllcnMgfSBmcm9tICJ2dWUiOwp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogInRodW1ibmFpbC13cmFwcGVyIgp9OwoKdmFyIF9ob2lzdGVkXzIgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgicCIsIG51bGwsICJ0aHVtYm5haWwiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfMyA9IHsKICBrZXk6IDAKfTsKdmFyIF9ob2lzdGVkXzQgPSBbInNyYyJdOwoKdmFyIF9ob2lzdGVkXzUgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnV0dG9uIiwgbnVsbCwgInNhdmUiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfNiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBudWxsLCBbLyojX19QVVJFX18qL19jcmVhdGVDb21tZW50Vk5vZGUoIiA8ZGl2PlxuICAgICAgICAgICAgICAgIDxpbWcgaWQ9XCJpbWFnZVwiIHNyYz1cIkAvYXNzZXRzL2xvZ28ucG5nXCI+XG4gICAgICAgICAgICA8L2Rpdj4gIildLCAtMQovKiBIT0lTVEVEICovCik7CgpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfaG9pc3RlZF8yLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJmb3JtIiwgewogICAgb25TdWJtaXQ6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gX3dpdGhNb2RpZmllcnMoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMudXNlclVwZGF0ZSAmJiAkb3B0aW9ucy51c2VyVXBkYXRlLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSwgWyJwcmV2ZW50Il0pKQogIH0sIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJpbnB1dCIsIHsKICAgIHR5cGU6ICJmaWxlIiwKICAgIG9uQ2hhbmdlOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLmdldEltYWdlICYmICRvcHRpb25zLmdldEltYWdlLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSksCiAgICBlbmN0eXBlOiAibXVsdGlwYXJ0L2Zvcm0tZGF0YSIKICB9LCBudWxsLCAzMgogIC8qIEhZRFJBVEVfRVZFTlRTICovCiAgKSwgJGRhdGEuc2VsZWN0ZWRGaWxlID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMywgW19jcmVhdGVFbGVtZW50Vk5vZGUoImltZyIsIHsKICAgIHJlZjogImltYWdlIiwKICAgIHNyYzogJGRhdGEuc2VsZWN0ZWRGaWxlCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBfaG9pc3RlZF80KV0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKSwgX2hvaXN0ZWRfNV0sIDMyCiAgLyogSFlEUkFURV9FVkVOVFMgKi8KICApLCAkZGF0YS5zZWxlY3RlZEZpbGUgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJidXR0b24iLCB7CiAgICBrZXk6IDAsCiAgICBvbkNsaWNrOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLmNoYW5jZWwgJiYgJG9wdGlvbnMuY2hhbmNlbC5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgImNoYW5jZWwiKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSksIF9ob2lzdGVkXzZdKTsKfQ=="},{"version":3,"sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue"],"names":[],"mappings":";;AACS,EAAA,KAAK,EAAC;;;8BACP,mBAAA,CAAgB,GAAhB,EAAgB,IAAhB,EAAG,WAAH,EAAY,CAAA;AAAA;AAAZ,C;;;;;;;8BAMK,mBAAA,CAAqB,QAArB,EAAqB,IAArB,EAAQ,MAAR,EAAY,CAAA;AAAA;AAAZ,C;;8BAGL,mBAAA,CAIM,KAJN,EAIM,IAJN,EAIM,C,aAHF,mBAAA,CAAA,2FAAA,CAGE,CAJN,E;;AAAA,C;;;uBAVJ,mBAAA,CAeM,KAfN,EAAA,UAAA,EAeM,CAdF,UAcE,EAbF,mBAAA,CAMO,MANP,EAMO;AANA,IAAA,QAAM,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,cAAA,CAAA;AAAA,aAAU,QAAA,CAAA,UAAA,IAAA,QAAA,CAAA,UAAA,OAAA,QAAA,YAAV;AAAA,KAAA,EAAoB,CAAA,SAAA,CAApB,CAAA;AAMN,GANP,E,CACI,mBAAA,CAAoE,OAApE,EAAoE;AAA7D,IAAA,IAAI,EAAC,MAAwD;AAAhD,IAAA,QAAM,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,QAAA,IAAA,QAAA,CAAA,QAAA,OAAA,QAAA,YAAF;AAAA,KAAA,CAA0C;AAA9B,IAAA,OAAO,EAAC;AAAsB,GAApE,E,IAAA,E;;AAAA,G,EACW,KAAA,CAAA,Y,kBAAX,mBAAA,CAEM,KAFN,EAEM,UAFN,EAEM,CADF,mBAAA,CAAqC,KAArC,EAAqC;AAAhC,IAAA,GAAG,EAAC,OAA4B;AAAnB,IAAA,GAAG,EAAE,KAAA,CAAA;AAAc,GAArC,E,IAAA,E;;AAAA,I,UAAA,CACE,CAFN,C,uCAGC,U,CALL,E;;AAAA,GAaE,EANa,KAAA,CAAA,Y,kBAAd,mBAAA,CAA6D,QAA7D,EAA6D;UAAA;AAAhC,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,OAAA,IAAA,QAAA,CAAA,OAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAA2B,GAA7D,EAA6C,SAA7C,C,qCAMC,EALF,UAKE,CAfN,C","sourcesContent":["<template>\n    <div class='thumbnail-wrapper'>\n        <p>thumbnail</p>\n        <form @submit.prevent='userUpdate'>\n            <input type=\"file\" @change='getImage' enctype=\"multipart/form-data\">\n            <div v-if=\"selectedFile\">\n                <img ref='image' :src=\"selectedFile\">\n            </div>\n             <button>save</button>\n        </form>\n         <button v-if='selectedFile' @click='chancel'>chancel</button>\n        <div>\n            <!-- <div>\n                <img id=\"image\" src=\"@/assets/logo.png\">\n            </div> -->\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport Cropper from 'cropperjs';\nexport default {\n    data(){\n        return{\n            file:'',\n            image:'',\n            selectedFile:null,\n            cropper:{},\n            destination:{}\n        }\n    },\n    mounted(){\n        // this.cropper()\n        console.log(this.image)\n    },\n    methods:{\n        async getImage(event){\n            console.log('event',event)\n            this.selectedFile = URL.createObjectURL(event.target.files[0])\n            this.image = event.target.files[0]\n            await console.log(this.image)\n            this.imageCropper()\n        },\n        async imageCropper(){\n            // console.log(Cropper.getCanvasData())\n            this.cropper = new Cropper(this.$refs.image, {\n            zoomable: false,\n            scalable: false,\n            zoomOnTouch: true,\n            aspectRatio: 1,\n            crop(event) {\n                    console.log(event.detail.x);\n                    console.log(event.detail.y);\n                    console.log(event.detail.width);\n                    console.log(event.detail.height);\n                    console.log(event.detail.rotate);\n                    console.log(event.detail.scaleX);\n                    console.log(event.detail.scaleY);\n                },\n            })\n        },\n        chancel(){\n            this.selectedFile=null\n        },\n        async userUpdate(){\n            const canvas = this.cropper.getCroppedCanvas({\n                width: 160,\n                height: 90,\n                minWidth: 256,\n                minHeight: 256,\n                maxWidth: 4096,\n                maxHeight: 4096,\n                fillColor: '#fff',\n                imageSmoothingEnabled: false,\n                imageSmoothingQuality: 'high',\n                });\n            canvas.toBlob(async (blob) => {\n            const formData = new FormData();\n            formData.append('thumbnail',blob, `${this.image}.png`),\n            console.log('getthumb',formData.get('thumbnail')),\n            await axios.patch(`/api/user/${this.$route.params.uid}`,\n                formData\n            )\n            }, 'image/png')\n            // this.$router.go({path: this.$router.currentRoute.path, force: true})\n        }\n    }\n}\n</script>\n\n<style>\n.thumbnail-wrapper{\n    width: 100%;\n    height: 100%;\n    overflow:scroll;  \n}\n.cropper-area img {\n  display: block;\n  max-width: 100%;\n}\n.cropper-view-box,\n    .cropper-face {\n      border-radius: 50%;\n      cursor: grab;\n      outline: initial;\n    }\n    .cropper-face:active {\n      cursor: grabbing;\n    }\n\n</style>"],"sourceRoot":""}]}