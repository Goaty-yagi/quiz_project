{"ast":null,"code":"import axios from 'axios';\nimport { uuid } from 'vue-uuid';\nexport default {\n  data() {\n    return {\n      title: '',\n      discription: '',\n      uuid: uuid.v1()\n    };\n  },\n\n  mounted() {\n    console.log(\"mounted_confirm\", this.$store.state.board.title);\n  },\n\n  beforeUnmount() {\n    this.$store.commit('fixedScrollFalse');\n  },\n\n  methods: {\n    async publish() {\n      console.log('start add', 'uuid', this.uuid);\n      await axios({\n        method: 'post',\n        url: '/api/board/question/create',\n        data: {\n          title: this.$store.state.board.title,\n          description: this.$store.state.board.description,\n          user: this.$store.state.signup.user.uid,\n          slug: this.uuid,\n          liked_num: {},\n          tag: this.getTagId()\n        }\n      }); // this.$emit('handleNotifications')\n\n      this.$emit('getDetail', this.uuid);\n      this.$store.dispatch(\"handleNotifications\", 'post');\n      this.$emit('handleShowConfirm'); // this.$router.go({path: this.$router.currentRoute.path, force: true})\n    },\n\n    getTagId() {\n      const idList = [];\n\n      for (let i of this.$store.state.board.selectedTagList) {\n        idList.push(i.id);\n      }\n\n      return idList;\n    } //     axios.post(\n    //         '/api/forum/question/',\n    //         {title: this.$store.state.title, \n    //         description: this.$store.state.description\n    //         },\n    //     ).then(response => {\n    //         console.log(response)\n    //     })\n    // },\n    // addQuestion(){\n    //     console.log('start add')\n    //     axios({\n    //         method: 'post',\n    //         url: '/api/forum/question',\n    //         data: {\n    //             title: this.$store.state.title,\n    //             description: this.$store.state.description\n    //         },\n    //     })\n    // .then((response) =>{\n    // }\n    // )\n\n\n  }\n};","map":{"version":3,"mappings":"AAiDA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,eAAe;EACXC,IAAI,GAAE;IACF,OAAM;MACFC,KAAK,EAAE,EADL;MAEFC,WAAW,EAAC,EAFV;MAGFH,IAAI,EAACA,IAAI,CAACI,EAAL;IAHH,CAAN;EAKH,CAPU;;EAQXC,OAAO,GAAE;IACLC,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8B,KAAKC,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwBR,KAAtD;EACH,CAVU;;EAWXS,aAAa,GAAE;IACX,KAAKH,MAAL,CAAYI,MAAZ,CAAmB,kBAAnB;EACH,CAbU;;EAcXC,OAAO,EAAC;IACJ,MAAMC,OAAN,GAAe;MACXR,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwB,MAAxB,EAA+B,KAAKP,IAApC;MACA,MAAMD,KAAK,CAAC;QACRgB,MAAM,EAAE,MADA;QAERC,GAAG,EAAE,4BAFG;QAGRf,IAAI,EAAE;UACFC,KAAK,EAAE,KAAKM,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwBR,KAD7B;UAEFe,WAAW,EAAE,KAAKT,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwBO,WAFnC;UAGFC,IAAI,EAAE,KAAKV,MAAL,CAAYC,KAAZ,CAAkBU,MAAlB,CAAyBD,IAAzB,CAA8BE,GAHlC;UAIFC,IAAI,EAAE,KAAKrB,IAJT;UAKFsB,SAAS,EAAC,EALR;UAMFC,GAAG,EAAE,KAAKC,QAAL;QANH;MAHE,CAAD,CAAX,CAFW,CAeX;;MACA,KAAKC,KAAL,CAAW,WAAX,EAAuB,KAAKzB,IAA5B;MACA,KAAKQ,MAAL,CAAYkB,QAAZ,CAAqB,qBAArB,EAA4C,MAA5C;MACA,KAAKD,KAAL,CAAW,mBAAX,EAlBW,CAmBX;IACH,CArBG;;IAsBJD,QAAQ,GAAE;MACN,MAAMG,MAAK,GAAI,EAAf;;MACA,KAAK,IAAIC,CAAT,IAAc,KAAKpB,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwBmB,eAAtC,EAAsD;QAClDF,MAAM,CAACG,IAAP,CAAYF,CAAC,CAACG,EAAd;MACJ;;MACA,OAAOJ,MAAP;IACJ,CA5BI,CA6BJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;;;EApDI;AAdG,CAAf","names":["axios","uuid","data","title","discription","v1","mounted","console","log","$store","state","board","beforeUnmount","commit","methods","publish","method","url","description","user","signup","uid","slug","liked_num","tag","getTagId","$emit","dispatch","idList","i","selectedTagList","push","id"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/board/Confirm.vue"],"sourcesContent":["<template>\n    <div class=\"l-wrapper\">\n        <div class=\"main-wrapper\">\n            <div class=\"create-question-wrapper\">\n                <div class=\"title-blue\">\n                    <p>質問投稿</p>\n                </div>\n                <div class=\"form\">\n                    <div class=\"question-title-container\">\n                        <div class='title-flex'>\n                            <p>TITLE</p>\n                        </div>\n                        <div\n                         class=\"question-title\">\n                            <p> {{ $store.state.board.title }} </p>\n                        </div>\n                        <!-- <input class='question-title' type=\"text\" v-model='title' :placeholder=\"$store.state.title\"> -->\n                    </div>\n                    <div class='tag-group-container'>\n                        <div v-for=\"(tag,tagindex) in $store.state.board.selectedTagList\"\n                        v-bind:key=\"tagindex\"\n                        class=\"tag-group\">\n                            <p>{{ tag.tag }}</p>  \n                        </div>\n                    </div>\n\n                    <div class=\"line\"></div>\n\n                    <div class=\"question-description\">\n                        <p class=\"title-blue\">質問文</p>\n                    </div>\n                    <div class='text-field'>\n                        <div class='form-text'>\n                            {{ $store.state.board.description }}\n                        </div>\n                    </div>\n                    <div class='confirm-message'>この内容で投稿しますか。\n                    </div>\n                    <div class=\"button-group\">\n                            <div class=\"back\" @click=\"this.$emit('handleShowConfirm')\">戻る</div>\n                            <button class=\"btn-tr-black-base-sq\" @click='publish'>投稿する</button>\n                    </div>            \n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { uuid } from 'vue-uuid';\nexport default {\n    data(){\n        return{\n            title: '',\n            discription:'',\n            uuid:uuid.v1(),\n        }\n    },\n    mounted(){\n        console.log(\"mounted_confirm\",this.$store.state.board.title)\n    },\n    beforeUnmount(){\n        this.$store.commit('fixedScrollFalse')\n    },\n    methods:{\n        async publish(){\n            console.log('start add','uuid',this.uuid)\n            await axios({\n                method: 'post',\n                url: '/api/board/question/create',\n                data: {\n                    title: this.$store.state.board.title,\n                    description: this.$store.state.board.description,\n                    user: this.$store.state.signup.user.uid,\n                    slug: this.uuid,\n                    liked_num:{},\n                    tag: this.getTagId()\n                },\n                \n            })\n            // this.$emit('handleNotifications')\n            this.$emit('getDetail',this.uuid)\n            this.$store.dispatch(\"handleNotifications\", 'post')\n            this.$emit('handleShowConfirm')\n            // this.$router.go({path: this.$router.currentRoute.path, force: true})\n        },\n        getTagId(){\n            const idList = []\n            for( let i of this.$store.state.board.selectedTagList){\n                idList.push(i.id)\n            }\n            return idList\n        }\n        //     axios.post(\n        //         '/api/forum/question/',\n        //         {title: this.$store.state.title, \n        //         description: this.$store.state.description\n        //         },\n        //     ).then(response => {\n        //         console.log(response)\n        //     })\n        // },\n        // addQuestion(){\n        //     console.log('start add')\n        //     axios({\n        //         method: 'post',\n        //         url: '/api/forum/question',\n        //         data: {\n        //             title: this.$store.state.title,\n        //             description: this.$store.state.description\n        //         },\n        //     })\n        // .then((response) =>{\n            \n        // }\n\n        // )\n    }\n}\n</script>\n\n<style scoped lang='scss'>\n@import \"style/_variables.scss\";\n.l-wrapper{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    .create-question-wrapper{\n        top:0;\n        left:0;\n        background: linear-gradient(to bottom right, #ffffff,#dddddd);;;\n        border: solid $dark-blue;\n        width:100%;\n        height: auto;\n        flex-direction: column;\n        display: flex;\n        // justify-content: center;\n        align-items: center;\n        padding: 1.5rem;\n        .form{\n            width: 100%;\n            display: flex;\n            flex-direction: column;\n            // justify-content: center;\n            align-items: center;\n            .question-title-container{\n                width:90%;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                .title-flex{\n                    display: flex;\n                    width: 90%;\n                }\n                .question-title{\n                    display: flex;\n                    align-items: center;\n                    border: solid $base-color;\n                    width: 90%;\n                    height: 2.5rem;\n                    background: $back-white;\n                    padding-left: 0.5rem;\n                    text-align: left;\n                    font-size: 0.8rem;            \n                }\n            }\n            .tag-group-container{\n                width:80%;\n                display: flex;\n                justify-content: center;\n                padding-top: 0.5rem;\n                .tag-group{\n                    border: solid gray;\n                    border-radius: 50vh;\n                    width: auto;\n                    min-width: 3rem;\n                    margin-right: 0.5rem;\n                    display: inline-block;\n                    align-items: center;\n                    padding-top:0.1rem;\n                    padding-bottom: 0.1rem;\n                    padding-left: 0.5rem;\n                    padding-right: 0.5rem;\n                    font-size:0.8rem;\n                }\n            }\n            .line{\n                width: 80%;\n                border-bottom: 0.2rem solid $middle-blue;\n                margin-top: 2rem;\n                margin-bottom: 1rem;\n            }\n            .question-description{\n                .title-black{\n                    margin: 0;\n                }\n            }\n            .text-field{\n                width:80%;\n                // overflow-y: scroll;\n                .form-text{\n                    text-align: left;\n                    height: 200px;\n                    width: 100%;\n                    background: $back-white;\n                    min-height: 100px;\n                    border: 0.1rem solid $base-color;\n                    border-radius: 1vh;\n                    padding: 1rem;\n                    white-space: pre-wrap;\n                    overflow-y: scroll;\n                }\n                .form-text:focus{\n                    outline: none;\n                }\n            }\n            .confirm-message{\n                margin-top: 1rem;\n                color: red;\n                font-weight: bold;\n            }\n            .button-group{\n                width: 80%;\n                display:flex;\n                margin:1rem;\n                justify-content: center;\n                .back{\n                    padding-right: 0.9rem;\n                    padding-left: 0.9rem;\n                    padding-top: 0.3rem;\n                    padding-bottom: 0.3rem;\n                    transition: 0.5s;\n                    border: solid $lite-gray;\n                }\n                .back:hover{\n                    background: $lite-gray;\n                }\n                .btn-tr-black-base-sq{\n                    margin-left: 0.5rem;\n                    padding-right: 0.5rem;\n                    padding-left: 0.5rem;\n                    transition: 0.5s;\n                }\n                .btn-tr-black-base-sq:hover{\n                    background: $base-color;\n                    color: white;\n                }\n            }\n        }   \n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}