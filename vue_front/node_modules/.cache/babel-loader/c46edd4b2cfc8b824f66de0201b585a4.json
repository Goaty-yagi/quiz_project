{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ossan/git-clone/quiz_project/vue_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport axios from 'axios';\nimport { uuid } from 'vue-uuid';\nexport default {\n  data: function data() {\n    return {\n      title: '',\n      discription: '',\n      uuid: uuid.v1(),\n      errorMessage: 'components/board/Comfirm'\n    };\n  },\n  mounted: function mounted() {\n    console.log(\"mounted_confirm\", this.$store.state.board.title);\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.$store.commit('fixedScrollFalse');\n  },\n  methods: {\n    publish: function publish() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('start add', 'uuid', _this.uuid);\n                _context.next = 3;\n                return axios({\n                  method: 'post',\n                  url: '/api/board/question/create',\n                  data: {\n                    title: _this.$store.state.board.title,\n                    description: _this.$store.state.board.description,\n                    user: _this.$store.state.signup.user.uid,\n                    slug: _this.uuid,\n                    liked_num: {},\n                    tag: _this.getTagId()\n                  }\n                }).catch(function (e) {\n                  var logger = {\n                    message: _this.errorMessage + \" publish\",\n                    path: window.location.pathname,\n                    actualErrorName: e.name,\n                    actualErrorMessage: e.message\n                  };\n\n                  _this.$store.commit('setLogger', logger);\n\n                  _this.$store.commit('setIsLoading', false);\n\n                  router.push({\n                    name: 'ConnectionError'\n                  });\n                });\n\n              case 3:\n                // this.$emit('handleNotifications')\n                _this.$emit('getDetail', _this.uuid);\n\n                _this.$store.dispatch(\"handleNotifications\", 'post');\n\n                _this.$emit('handleShowConfirm'); // this.$router.go({path: this.$router.currentRoute.path, force: true})\n\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    getTagId: function getTagId() {\n      var idList = [];\n\n      var _iterator = _createForOfIteratorHelper(this.$store.state.board.selectedTagList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var i = _step.value;\n          idList.push(i.id);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return idList;\n    } //     axios.post(\n    //         '/api/forum/question/',\n    //         {title: this.$store.state.title, \n    //         description: this.$store.state.description\n    //         },\n    //     ).then(response => {\n    //         console.log(response)\n    //     })\n    // },\n    // addQuestion(){\n    //     console.log('start add')\n    //     axios({\n    //         method: 'post',\n    //         url: '/api/forum/question',\n    //         data: {\n    //             title: this.$store.state.title,\n    //             description: this.$store.state.description\n    //         },\n    //     })\n    // .then((response) =>{\n    // }\n    // )\n\n  }\n};","map":{"version":3,"mappings":";;;;;;AAiDA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,eAAe;EACXC,IADW,kBACL;IACF,OAAM;MACFC,KAAK,EAAE,EADL;MAEFC,WAAW,EAAC,EAFV;MAGFH,IAAI,EAACA,IAAI,CAACI,EAAL,EAHH;MAIFC,YAAY,EAAE;IAJZ,CAAN;EAMH,CARU;EASXC,OATW,qBASF;IACLC,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8B,KAAKC,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwBT,KAAtD;EACH,CAXU;EAYXU,aAZW,2BAYI;IACX,KAAKH,MAAL,CAAYI,MAAZ,CAAmB,kBAAnB;EACH,CAdU;EAeXC,OAAO,EAAC;IACEC,OADF,qBACW;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;gBACXR,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwB,MAAxB,EAA+B,KAAI,CAACR,IAApC;gBADW;gBAAA,OAELD,KAAK,CAAC;kBACRiB,MAAM,EAAE,MADA;kBAERC,GAAG,EAAE,4BAFG;kBAGRhB,IAAI,EAAE;oBACFC,KAAK,EAAE,KAAI,CAACO,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwBT,KAD7B;oBAEFgB,WAAW,EAAE,KAAI,CAACT,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwBO,WAFnC;oBAGFC,IAAI,EAAE,KAAI,CAACV,MAAL,CAAYC,KAAZ,CAAkBU,MAAlB,CAAyBD,IAAzB,CAA8BE,GAHlC;oBAIFC,IAAI,EAAE,KAAI,CAACtB,IAJT;oBAKFuB,SAAS,EAAC,EALR;oBAMFC,GAAG,EAAE,KAAI,CAACC,QAAL;kBANH;gBAHE,CAAD,CAAL,CAaLC,KAbK,CAaC,UAACC,CAAD,EAAO;kBACV,IAAIC,MAAK,GAAI;oBACTC,OAAO,EAAE,KAAI,CAACxB,YAAL,GAAoB,UADpB;oBAETyB,IAAI,EAAEC,MAAM,CAACC,QAAP,CAAgBC,QAFb;oBAGTC,eAAe,EAAEP,CAAC,CAACQ,IAHV;oBAITC,kBAAkB,EAAET,CAAC,CAACE;kBAJb,CAAb;;kBAMA,KAAI,CAACpB,MAAL,CAAYI,MAAZ,CAAmB,WAAnB,EAA+Be,MAA/B;;kBACA,KAAI,CAACnB,MAAL,CAAYI,MAAZ,CAAmB,cAAnB,EAAmC,KAAnC;;kBACAwB,MAAM,CAACC,IAAP,CAAY;oBAAEH,IAAI,EAAE;kBAAR,CAAZ;gBACH,CAvBK,CAFK;;cAAA;gBA0BX;gBACA,KAAI,CAACI,KAAL,CAAW,WAAX,EAAuB,KAAI,CAACvC,IAA5B;;gBACA,KAAI,CAACS,MAAL,CAAY+B,QAAZ,CAAqB,qBAArB,EAA4C,MAA5C;;gBACA,KAAI,CAACD,KAAL,CAAW,mBAAX,EA7BW,CA8BX;;;cA9BW;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IA+Bd,CAhCG;IAiCJd,QAjCI,sBAiCM;MACN,IAAMgB,MAAK,GAAI,EAAf;;MADM,2CAEQ,KAAKhC,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwB+B,eAFhC;MAAA;;MAAA;QAEN,oDAAsD;UAAA,IAA7CC,CAA6C;UAClDF,MAAM,CAACH,IAAP,CAAYK,CAAC,CAACC,EAAd;QACJ;MAJM;QAAA;MAAA;QAAA;MAAA;;MAKN,OAAOH,MAAP;IACJ,CAvCI,CAwCJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;;EA/DI;AAfG,CAAf","names":["axios","uuid","data","title","discription","v1","errorMessage","mounted","console","log","$store","state","board","beforeUnmount","commit","methods","publish","method","url","description","user","signup","uid","slug","liked_num","tag","getTagId","catch","e","logger","message","path","window","location","pathname","actualErrorName","name","actualErrorMessage","router","push","$emit","dispatch","idList","selectedTagList","i","id"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/board/Confirm.vue"],"sourcesContent":["<template>\n    <div class=\"l-wrapper\">\n        <div class=\"main-wrapper\">\n            <div class=\"create-question-wrapper\">\n                <div class=\"title-blue\">\n                    <p>質問投稿</p>\n                </div>\n                <div class=\"form\">\n                    <div class=\"question-title-container\">\n                        <div class='title-flex'>\n                            <p>TITLE</p>\n                        </div>\n                        <div\n                         class=\"question-title\">\n                            <p> {{ $store.state.board.title }} </p>\n                        </div>\n                        <!-- <input class='question-title' type=\"text\" v-model='title' :placeholder=\"$store.state.title\"> -->\n                    </div>\n                    <div class='tag-group-container'>\n                        <div v-for=\"(tag,tagindex) in $store.state.board.selectedTagList\"\n                        v-bind:key=\"tagindex\"\n                        class=\"tag-group\">\n                            <p>{{ tag.tag }}</p>  \n                        </div>\n                    </div>\n\n                    <div class=\"line\"></div>\n\n                    <div class=\"question-description\">\n                        <p class=\"title-blue\">質問文</p>\n                    </div>\n                    <div class='text-field'>\n                        <div class='form-text'>\n                            {{ $store.state.board.description }}\n                        </div>\n                    </div>\n                    <div class='confirm-message'>この内容で投稿しますか。\n                    </div>\n                    <div class=\"button-group\">\n                            <div class=\"back\" @click=\"this.$emit('handleShowConfirm')\">戻る</div>\n                            <button class=\"btn-tr-black-base-sq\" @click='publish'>投稿する</button>\n                    </div>            \n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { uuid } from 'vue-uuid';\nexport default {\n    data(){\n        return{\n            title: '',\n            discription:'',\n            uuid:uuid.v1(),\n            errorMessage: 'components/board/Comfirm',\n        }\n    },\n    mounted(){\n        console.log(\"mounted_confirm\",this.$store.state.board.title)\n    },\n    beforeUnmount(){\n        this.$store.commit('fixedScrollFalse')\n    },\n    methods:{\n        async publish(){\n            console.log('start add','uuid',this.uuid)\n            await axios({\n                method: 'post',\n                url: '/api/board/question/create',\n                data: {\n                    title: this.$store.state.board.title,\n                    description: this.$store.state.board.description,\n                    user: this.$store.state.signup.user.uid,\n                    slug: this.uuid,\n                    liked_num:{},\n                    tag: this.getTagId()\n                },\n                \n            })\n            .catch((e) => {\n                let logger = {\n                    message: this.errorMessage + \" publish\",\n                    path: window.location.pathname,\n                    actualErrorName: e.name,\n                    actualErrorMessage: e.message,\n                }\n                this.$store.commit('setLogger',logger)\n                this.$store.commit('setIsLoading', false)\n                router.push({ name: 'ConnectionError' })\n            })\n            // this.$emit('handleNotifications')\n            this.$emit('getDetail',this.uuid)\n            this.$store.dispatch(\"handleNotifications\", 'post')\n            this.$emit('handleShowConfirm')\n            // this.$router.go({path: this.$router.currentRoute.path, force: true})\n        },\n        getTagId(){\n            const idList = []\n            for( let i of this.$store.state.board.selectedTagList){\n                idList.push(i.id)\n            }\n            return idList\n        }\n        //     axios.post(\n        //         '/api/forum/question/',\n        //         {title: this.$store.state.title, \n        //         description: this.$store.state.description\n        //         },\n        //     ).then(response => {\n        //         console.log(response)\n        //     })\n        // },\n        // addQuestion(){\n        //     console.log('start add')\n        //     axios({\n        //         method: 'post',\n        //         url: '/api/forum/question',\n        //         data: {\n        //             title: this.$store.state.title,\n        //             description: this.$store.state.description\n        //         },\n        //     })\n        // .then((response) =>{\n            \n        // }\n\n        // )\n    }\n}\n</script>\n\n<style scoped lang='scss'>\n@import \"style/_variables.scss\";\n.l-wrapper{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    .create-question-wrapper{\n        top:0;\n        left:0;\n        background: linear-gradient(to bottom right, #ffffff,#dddddd);;;\n        border: solid $dark-blue;\n        width:100%;\n        height: auto;\n        flex-direction: column;\n        display: flex;\n        // justify-content: center;\n        align-items: center;\n        padding: 1.5rem;\n        .form{\n            width: 100%;\n            display: flex;\n            flex-direction: column;\n            // justify-content: center;\n            align-items: center;\n            .question-title-container{\n                width:90%;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                .title-flex{\n                    display: flex;\n                    width: 90%;\n                }\n                .question-title{\n                    display: flex;\n                    align-items: center;\n                    border: solid $base-color;\n                    width: 90%;\n                    height: 2.5rem;\n                    background: $back-white;\n                    padding-left: 0.5rem;\n                    text-align: left;\n                    font-size: 0.8rem;            \n                }\n            }\n            .tag-group-container{\n                width:80%;\n                display: flex;\n                justify-content: center;\n                padding-top: 0.5rem;\n                .tag-group{\n                    border: solid gray;\n                    border-radius: 50vh;\n                    width: auto;\n                    min-width: 3rem;\n                    margin-right: 0.5rem;\n                    display: inline-block;\n                    align-items: center;\n                    padding-top:0.1rem;\n                    padding-bottom: 0.1rem;\n                    padding-left: 0.5rem;\n                    padding-right: 0.5rem;\n                    font-size:0.8rem;\n                }\n            }\n            .line{\n                width: 80%;\n                border-bottom: 0.2rem solid $middle-blue;\n                margin-top: 2rem;\n                margin-bottom: 1rem;\n            }\n            .question-description{\n                .title-black{\n                    margin: 0;\n                }\n            }\n            .text-field{\n                width:80%;\n                // overflow-y: scroll;\n                .form-text{\n                    text-align: left;\n                    height: 200px;\n                    width: 100%;\n                    background: $back-white;\n                    min-height: 100px;\n                    border: 0.1rem solid $base-color;\n                    border-radius: 1vh;\n                    padding: 1rem;\n                    white-space: pre-wrap;\n                    overflow-y: scroll;\n                }\n                .form-text:focus{\n                    outline: none;\n                }\n            }\n            .confirm-message{\n                margin-top: 1rem;\n                color: red;\n                font-weight: bold;\n            }\n            .button-group{\n                width: 80%;\n                display:flex;\n                margin:1rem;\n                justify-content: center;\n                .back{\n                    padding-right: 0.9rem;\n                    padding-left: 0.9rem;\n                    padding-top: 0.3rem;\n                    padding-bottom: 0.3rem;\n                    transition: 0.5s;\n                    border: solid $lite-gray;\n                }\n                .back:hover{\n                    background: $lite-gray;\n                }\n                .btn-tr-black-base-sq{\n                    margin-left: 0.5rem;\n                    padding-right: 0.5rem;\n                    padding-left: 0.5rem;\n                    transition: 0.5s;\n                }\n                .btn-tr-black-base-sq:hover{\n                    background: $base-color;\n                    color: white;\n                }\n            }\n        }   \n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}