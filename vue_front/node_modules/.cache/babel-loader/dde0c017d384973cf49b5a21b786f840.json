{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers } from \"vue\";\nvar _hoisted_1 = {\n  class: \"thumbnail-wrapper\"\n};\n\nvar _hoisted_2 = /*#__PURE__*/_createElementVNode(\"p\", null, \"thumbnail\", -1\n/* HOISTED */\n);\n\nvar _hoisted_3 = {\n  key: 0,\n  class: \"cropper-outer-wrapper\"\n};\nvar _hoisted_4 = {\n  class: \"cropperinner-wrapper\"\n};\nvar _hoisted_5 = [\"src\"];\n\nvar _hoisted_6 = /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"save-button\"\n}, \"save\", -1\n/* HOISTED */\n);\n\nvar _hoisted_7 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createCommentVNode(\" <div>\\n                <img id=\\\"image\\\" src=\\\"@/assets/logo.png\\\">\\n            </div> \")], -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers(function () {\n      return $options.userUpdate && $options.userUpdate.apply($options, arguments);\n    }, [\"prevent\"]))\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = function () {\n      return $options.getImage && $options.getImage.apply($options, arguments);\n    }),\n    enctype: \"multipart/form-data\"\n  }, null, 32\n  /* HYDRATE_EVENTS */\n  ), $data.selectedFile ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"img\", {\n    ref: \"image\",\n    src: $data.selectedFile,\n    style: {\n      \"width\": \"300px\",\n      \"height\": \"300px\"\n    }\n  }, null, 8\n  /* PROPS */\n  , _hoisted_5)]), _hoisted_6, $data.selectedFile ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"save-button\",\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.chancel && $options.chancel.apply($options, arguments);\n    })\n  }, \"chancel\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 　　　　 \")])) : _createCommentVNode(\"v-if\", true)], 32\n  /* HYDRATE_EVENTS */\n  ), _hoisted_7]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;;;8BACPC,oBAAgB,GAAhB,EAAgB,IAAhB,EAAG,WAAH,EAAY;AAAA;AAAZ;;;;EAGSD,KAAK,EAAC;;;EACFA,KAAK,EAAC;;;;8BAGXC,oBAAyC,QAAzC,EAAyC;EAAjCD,KAAK,EAAC;AAA2B,CAAzC,EAA4B,MAA5B,EAAgC;AAAA;AAAhC;;8BAKRC,oBAIM,KAJN,EAIM,IAJN,EAIM,cAHFC,gHAGE,CAJN;;AAAA;;;uBAbJC,oBAkBM,KAlBN,cAkBM,CAjBFC,UAiBE,EAhBFH,oBAUO,MAVP,EAUO;IAVAI,QAAM;MAAA,OAAUC,qEAAV;IAAA,GAAoB,WAApB;EAUN,CAVP,GACIL,oBAAoE,OAApE,EAAoE;IAA7DM,IAAI,EAAC,MAAwD;IAAhDC,QAAM;MAAA,OAAEF,iEAAF;IAAA,EAA0C;IAA9BG,OAAO,EAAC;EAAsB,CAApE;;EAAA,GACyCC,oCAAzCP,oBAOM,KAPN,cAOM,CANFF,oBAEM,KAFN,cAEM,CADFA,oBAA0E,KAA1E,EAA0E;IAArEU,GAAG,EAAC,OAAiE;IAAxDC,GAAG,EAAEF,kBAAmD;IAArCG,KAAoC,EAApC;MAAA;MAAA;IAAA;EAAqC,CAA1E;;EAAA,aACE,CAFN,CAME,EAHFC,UAGE,EAFgCJ,oCAAlCP,oBAAiF,QAAjF,EAAiF;UAAA;IAAzEH,KAAK,EAAC,aAAmE;IAAhCe,OAAK;MAAA,OAAET,+DAAF;IAAA;EAA2B,CAAjF,EAAiE,SAAjE,sCAEE,EADFJ,6BACE,CAPN,uCAFJ;;EAAA,CAgBE,EALFc,UAKE,CAlBN","names":["class","_createElementVNode","_createCommentVNode","_createElementBlock","_hoisted_2","onSubmit","$options","type","onChange","enctype","$data","ref","src","style","_hoisted_6","onClick","_hoisted_7"],"sourceRoot":"","sources":["/Users/ossan/git-clone/quiz_project/vue_front/src/components/account/Thumbnail.vue"],"sourcesContent":["<template>\n    <div class='thumbnail-wrapper'>\n        <p>thumbnail</p>\n        <form @submit.prevent='userUpdate'>\n            <input type=\"file\" @change='getImage' enctype=\"multipart/form-data\">\n            <div class=\"cropper-outer-wrapper\" v-if=\"selectedFile\">\n                <div class='cropperinner-wrapper'>\n                    <img ref='image' :src=\"selectedFile\" style=\"width: 300px; height: 300px;\">\n                </div>\n                <button class='save-button'>save</button>\n                <button class='save-button' v-if='selectedFile' @click='chancel'>chancel</button>\n                <!-- 　　　　 -->\n            </div>\n        </form>\n        <div>\n            <!-- <div>\n                <img id=\"image\" src=\"@/assets/logo.png\">\n            </div> -->\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport Cropper from 'cropperjs';\nexport default {\n    data(){\n        return{\n            file:'',\n            image:'',\n            selectedFile:null,\n            cropper:{},\n            destination:{}\n        }\n    },\n    mounted(){\n        // this.cropper()\n        console.log(this.image)\n    },\n    methods:{\n        async getImage(event){\n            console.log('event',event)\n            this.selectedFile = URL.createObjectURL(event.target.files[0])\n            this.image = event.target.files[0]\n            await console.log(this.image)\n            this.imageCropper()\n        },\n        async imageCropper(){\n            this.cropper = new Cropper(this.$refs.image, {\n            zoomable: false,\n            scalable: false,\n            zoomOnTouch: true,\n            aspectRatio: 1,\n            crop(event) {\n                    console.log(event.detail.x);\n                    console.log(event.detail.y);\n                    console.log(event.detail.width);\n                    console.log(event.detail.height);\n                    console.log(event.detail.rotate);\n                    console.log(event.detail.scaleX);\n                    console.log(event.detail.scaleY);\n                },\n            })\n        },\n        chancel(){\n            this.selectedFile=null\n        },\n        // getCroppedURL(){\n        //     console.log('croppedURL')\n        //     document.getElementById('crop-btn').addEventListener('click', function () {\n        //     resultImgUrl = this.cropper.getCroppedCanvas().toDataURL();\n        //     var result = document.getElementById('result-img');\n        //     result.src = resultImgUrl;\n        //      });\n        // },\n        async userUpdate(){\n            const canvas = this.cropper.getCroppedCanvas({\n                width: 160,\n                height: 90,\n                minCropBoxHeight: 300,\n                minCropBoxWidth: 300,\n                maxWidth: 4096,\n                maxHeight: 4096,\n                fillColor: '#fff',\n                imageSmoothingEnabled: false,\n                imageSmoothingQuality: 'high',\n                });\n            canvas.toBlob(async (blob) => {\n            const formData = new FormData();\n            formData.append('thumbnail',blob, `${this.image}.png`),\n            console.log('getthumb',formData.get('thumbnail')),\n            await axios.patch(`/api/user/${this.$route.params.uid}`,\n                formData\n            )\n            }, 'image/png')\n            // this.$router.go({path: this.$router.currentRoute.path, force: true})\n        }\n    }\n}\n</script>\n\n<style>\n.thumbnail-wrapper{\n    width: 100%;\n    height: 100%;\n    overflow:scroll;  \n}\n.save-button{\n    z-index: 10;\n}\n.cropper-view-box,\n    .cropper-face {\n      border-radius: 50%;\n      cursor: grab;\n      outline: initial;\n    }\n    .cropper-face:active {\n      cursor: grabbing;\n    }\n</style>"]},"metadata":{},"sourceType":"module"}